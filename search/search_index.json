{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Data for Spatial Units","text":"d4SU    An enabling platform for the Digital Transformation of Building Permits and other administrative  processes. Keywords: BIM / IFC / IDS, LADM, DBL, DBP, EPB, LCA,...  <p>Documentation: https://d4su.org</p> <p>Source code: https://github.com/lvanlier/d4su-server</p> <p></p> <p></p> <p> The d4SU platform imports IFC files, validates them against repquirements defined in IDS and stores their data (objects, relationships, properties and geometries) in a PostgreSQL database. It leverages OpenBIM tools such as IfcOpenShell and provides APIs for business applications to easily consume this technical data. </p> <p> It is in early development stage and features are partially available. </p>"},{"location":"about/","title":"About d4SU","text":"<p>Climate change and energy challenges require drastic improvements in all aspects relating to the life cycle of Buildings and Infrastructures. To cope with the challenges, and meet the climate objectives for 2050, numerous initiatives have promoted the evaluation of buildings and infrastructures along indicators such as the Life Cycle Assessment (LCA), the Energy Performance Certificate of Buildings (EPC), the Reuse Potential Indicator (RPI) and the consistent aggregation of data in the Building LogBook or Passport, ... with a proliferation of distinct techniques and tools that each collect data which is already available in the AEC data and can be provided in the standard exchange format of the industry, namely Industry Foundation Classes (IFC).</p> <p>As I worked on some of these subjects (Building LogBook, Urban Permit, EPC, ...), the gap between the AEC industry and administrative processes was striking. Despite the existence of an extensive litterature on the use of IFC for the support of the administrative processes, adoption of IFC as a priviledge source of technical data for Buildings and Infrastructure remained scarce. One of the possible cause could that IFC is available as a file that must be processed by specific programs and is not directly legible (this will change with IFC5).</p> <p>There has been several attempts to store the IFC in a database while preserving the complex structure of the data. This is all fine but does not bridge the gap between the AEC and the administrative monitoring processes. There could therefore be a place for a platform that can process IFC and make the information available in a standard database (PostgreSQL) using a simple physical data model that can be accessed with SQL. This would potentially create a basis for a Single Source of Truth for technical data for Buildings and Infrastructures, with a seamless integration with other aspects as well.</p> <p>This is precisely what d4SU is aiming at. IFC2X3 and IFC4 files are processed, transformed in the ifcJSON format and stored in a relatively simple physical model. From there an IFC4 file can always be generated where needed to support rich 3D Visualization.</p> <p>The platform is based on scalable tools that could support a production deployment, but the application remains currently at an exploratory level.</p> <p>Although there remains significant work to be done, there are already positive results:</p> <ul> <li>the platform can leverage available python libraries such as IfcOpenShell, that underpins numerous capabilities, starting with the transformation of IFC into ifcJSON</li> <li>the ifcJSON format is very close to IFC and easy to use with PostgreSQL JSON handling</li> <li>while SQL can be taxed as 'verbose', it is nevertherless very efficient, combining simplicity and performance.</li> </ul> <p>D4SU started in 2024, when IFC5 was taking shape, but was not yet a standard with appropriate implementations and tooling.</p> <p>So, there will remain the challenge of integrating IFC5, from now on and as it reaches maturity.</p>"},{"location":"contact/","title":"Contact","text":"<p>d4SU is developed by Luc Van Lier at A-X-O Solutions</p> <p>email: luc.vanlier@a-x-o.solutions</p> <p>linkedIn: Luc Van Lier</p>"},{"location":"architecture/d4su-server/","title":"d4SU Server","text":""},{"location":"architecture/d4su-server/#overview","title":"Overview","text":"<p>The d4SU Server platform is focused on the management of the Building and Infrastructure Data in the context of Spatial Units subjected to Public Sector regulations. Currently the focus is on the Building data and services relevant to Infrastructure data are not available at this moment.</p> <p>By 'focused on data', it is also meant 'not providing' other functionalities such as the integration in a broader landscape. This is the responsibility of an Integration Platform that is not is scope of the d4SU Server Platform.</p> <p></p> <p>The d4SU Platform has 4 main technology components</p> <ul> <li>FastAPI A modern, fast (high-performance), web framework for building APIs with Python.</li> <li>Celery A Distributed Task Queue in Python</li> <li>Redis An In-Memory Database used for Celery as Message Queue and Result Store</li> <li>PostgreSQL A powerful, open source object-relational database with support for a large variety of column types (including json, jsonb, geometry) and Partitioning options for very large DB size. It has support for Geomtry with PostGIS and support for Graph with Apache AGE.</li> </ul> <p>The d4SU Platform also leverage:</p> <ul> <li>SQLModel SQLModel is based on Python type annotations, and powered by Pydantic and SQLAlchemy</li> <li>PyArrow Apache Arrow - Filesystem Interface  provides input and output streams as well as directory operations for the Local File System, Amazon S3, Google Cloud Storage (GCS), HDFS and others.</li> <li>Other Apache Arrow tools (e.g., ADBC Driver for PostgreSQL, or support for Machine Learning Workflows) might be super relevant but that's not yet investigated.</li> <li>IfcOpenShell A suite of IFC tools in C++ and Python the base layer of the d4SU Server and the rational for it to be in Python</li> <li>IfcSON Python Tool (on top of ifcOpenShell) to convert an IFC to a JSON (IFC2JSON) and a JSON to an IFC (JSON2IFC). IfcJSON has been built in the context of a larger project presented in IFC.JSON</li> </ul>"},{"location":"architecture/d4su-server/#c4-diagram","title":"C4 diagram","text":"<p>The diagram hereunder is built with Mermaid.js integrated with Material for MkDocs. At the present time, it is not quite legible in dark mode and a swicth to standard mode (top menu bar) is recommended</p> <pre><code>\nC4Container\n    System_Ext(Integration, \"Integration server\", \"A system that sends processing Request to the &lt;br /&gt;Backend server and gets responses on behalf of a client system\")\n\n    System_Boundary(b1, \"Backend Server\") {\n        System_Boundary(b2, \"Server\") {\n            System(FastAPI, \"FastAPI\", \"Processes requests&lt;br /&gt; Delegates heavy tasks to Celery\")\n\n            Component(Tools, \"Tools\", \"IfcOpenShell&lt;br /&gt;IfcJSON\")\n\n            Component(Logging, \"Logging\",\"\")\n\n            System(Celery, \"Celery Worker\", \"Processes heavy tasks\")\n        } \n        System_Boundary(b3, \"Broker\") {\n            SystemQueue(Broker, \"Broker and &lt;br /&gt;Result Store (Redis)\", \"Act as a Message Broker and  &lt;br /&gt;a Result Store between FastAPI and Celery\")\n        }    \n        System_Boundary(b4, \"Database\", \"Database\") {\n            SystemDb(Database, \"Postgres Database\", \"Stores the D4SU data\") \n        }\n        System_Boundary(b5, \"File Storage\", \"\") {\n            SystemDb(FileStorage, \"File Storage (Apache Arrow FS)\", \"Provides file storage services for IFC and IfcJSON files\")   \n        }\n\n    }\n    BiRel(Integration, FastAPI , \"Request / Response or Notification\")\n    BiRel(FastAPI, Broker, \"Queue Task (Chain), Read Result\")\n    Rel(Celery, Broker, \"Fetch from Queue and Write Result\")\n    Rel(FastAPI, Tools, \"uses\")\n    Rel(Celery, Tools, \"uses\")\n    Rel(FastAPI, Database, \"CRUD Data\")\n    Rel(Celery, Database, \"CRUD Data\") \n    Rel(Celery, FileStorage, \"Read/Write\")\n\n    UpdateElementStyle(Integration, $fontColor=\"white\", $bgColor=\"black\", $borderColor=\"white\")\n\n    UpdateRelStyle(FastAPI, Integration, $offsetX=\"20\", $offsetY=\"20\")\n    UpdateRelStyle(FastAPI, Celery, $textColor=\"blue\", $lineColor=\"blue\", $offsetX=\"5\")\n\n    UpdateLayoutConfig($c4ShapeInRow=\"3\", $c4BoundaryInRow=\"2\")\n</code></pre>"},{"location":"architecture/d4su-server/#rationale-for-tools","title":"Rationale for tools","text":"<p>The d4SU platform is at the early stage of exploration, concept validation and specification. Speed and ease of implementation is key.</p> <ul> <li>Why Python? Python is very easy to comprehend and has a huge ecosystem. Additionally, IfcOpenShell has a python version and it makes IFC much more accessible. With Jupyter, everthing can be tried before moving the code to a server plaform. And pandas are always welcome to make things simpler.</li> <li>Why FastAPI? Incredibly simple and efficient.</li> <li>Why Celery? Can't do without something to manage heavy tasks and avoid blocking the requester. Celery is a perfect fit, powerful and easy to use.</li> <li>Why Redis? Again, powerful, and easy to use. With Celery, there are multiple options for the Broker and Result Store. Redis caters for the two.</li> <li>Why PostgreSQL? It's mainly why another db? It has all that is needed. It has also Support for Geometry and Graph, via extensions. For extremely large DB, an offloading to HBase with Phoenix could be considered, but that is not needed at this stage.</li> <li>Why SQLModel (on top of SQLAlchemy) to access PostgreSQL? Again ease of use.</li> </ul> <p>When working with IFC, there is always a need for a Viewer. I am using:</p> <ul> <li>OpenIFCViewer</li> <li>ThatOpen (Web)</li> <li>BIMCollab ZOOM</li> <li>Solibri Anywhere</li> <li>Blender with Bonsai; see also the video on Youtube</li> </ul> <p>Why several viewers?: with the difference in versions of the IFC files (2x3, 4.0, ...) and and possible tools rendering issues, I found it a necessity to control results with several viewers. They each have distinctive capabilities.</p> <p>For coding, I use Visual Studio Code and GitHub Copilot. GenAI for coding is a marvel. It does not always provide the solution to the problem but it wonderfully seeds the process that leads to the solution.</p> <p>For the documentation, I use Material for MkDocs. It's a breeze!</p>"},{"location":"architecture/d4su-server/#simple-flow","title":"Simple flow","text":"<pre><code>sequenceDiagram\n    autonumber\n    Integration -&gt;&gt; FastAPI: RESTful request\n    FastAPI -&gt;&gt; PostgreSQL: CRUD \n    FastAPI --&gt;&gt; Integration: response\n</code></pre> <p>Within FastAPI, the the design is layered in a standard way, with all layers sharing the same models</p> <pre><code>%%{init: {\"flowchart\": {\"htmlLabels\": true}} }%%\nflowchart\n    direction RL\n    subgraph fastapi [\"FastAPI\"]\n        direction TB\n        web\n        service\n        data\n        model\n        web --&gt; service\n        service --&gt; data\n        data --&gt; service\n        service --&gt; web\n    end\n    subgraph storage\n        direction TB\n        database\n        filestorage\n    end\n    fastapi --&gt; storage\n</code></pre>"},{"location":"architecture/d4su-server/#flow-with-long-running-background-tasks","title":"Flow with long running background tasks","text":"<p>For relatively 'long running' tasks, the caller will not hang waiting for the completion. The latter will be notified asynchronously.  </p> <p>Mermaid.js layout is sometimes a mystery!</p> <pre><code>%%{init: {\"flowchart\": {\"htmlLabels\": true}} }%%\nflowchart\n    direction TB\n    integration\n    subgraph d4su-server [\"d4su Platform\"]\n        direction TB\n        subgraph front-server\n            direction TB\n            fastapi[FastAPI] \n        end\n        subgraph task-server\n            celery[\"Celery Worker(s) for background tasks\"]\n        end\n        subgraph broker [\"Broker and Result Store\"]\n            direction TB\n            redis[Redis]\n        end\n        subgraph Storage\n            direction TB\n            db[PostgreSQL]\n            fs[\"File Storage&lt;br /&gt;with Apache Arrow FS (local fs, S3, ...)\"]\n        end\n    end   \n    integration -- \"*1.* request\" --&gt; fastapi\n    fastapi -- \"*2.* rsponse with follow-up id\" --&gt; integration\n    fastapi -- \"*3.* instructions\" --&gt; redis\n    celery -- \"*4.* get instructions\" --&gt; redis\n    celery -- \"*5.* get and write files\" --&gt; fs\n    celery -- \"*6.* CRUD Model\" --&gt; db\n    celery -- \"*7.* write task results\" --&gt; redis\n    celery -- \"*8.* notify result\" --&gt; fastapi\n    fastapi -- \"*9.* notify result for follow-up id\" --&gt; integration\n</code></pre> <pre><code>sequenceDiagram\n    autonumber\n    Integration -&gt;&gt; FastAPI: request\n    FastAPI --&gt;&gt; Integration: response with follow-up id\n    FastAPI -&gt;&gt; Redis: intructions\n    Celery Worker -&gt;&gt; Redis: get instructions\n    Celery Worker -&gt;&gt; File Storage: get and write files\n    Celery Worker -&gt;&gt; PostgreSQL : CRUD Model\n    Celery Worker -&gt;&gt; Redis: write task results\n    Celery Worker --&gt;&gt; FastAPI: notify task completion\n    FastAPI --&gt;&gt; Integration: notify result for follow-up id </code></pre> <p>This illustrative flow is as follows:</p> <ol> <li>A request is made by the Integration platform and received by the web layer in FastAPI. The request can come as a RESTfull request or as a WebSocket message.</li> <li>A response is provided by FastAPI with an Id for the follow-up</li> <li>The request is serviced by the sevice layer in FastAPI. There, the request is associated with a single task, or with a group of tasks that can be executed in parallel or as a chain of tasks that must be performed in sequence. The execution is trigered by sending a message to the broker (Redis).</li> <li>Celery has started a number of worker (by default 2 workers per core). A Celery Worker takes the task from the broker and execute the task</li> <li>The task execution may e.g., gets an IFC file, transforms the file, filters the content</li> <li>The task execution may eg., stores the filtered content in Postgres, ... One big task can be splitted in independent tasks that can be executed in parallel or in sequence in a chain.</li> <li>Each task writes its result (such as status and parameters to be transfered to the next tasks) in the Result Store, which here is also Redis.</li> <li>At the end, the task completion (one task, the group or the chain) is notified back to FastAPI. This can be done by a POST back to FastAPI. Alternatively, FastAPI could poll the broker every second to get the status of the task.</li> <li>FastAPI notifies the Integration Platform of the result of the request. Can be done va WebSockets or via a 'callback' POST.</li> </ol>"},{"location":"architecture/d4su-server/#deployment-view","title":"Deployment view","text":"<pre><code>architecture-beta\n    group d4su(cloud)[d4SU]\n    service server1(server)[FastAPI] in d4su\n    service server2(server)[Redis] in d4su\n    service server3(server)[Celery] in d4su\n    service db(database)[PosgreSQL] in d4su\n    service disk(disk)[FileStore] in d4su\n    server2:L -- R:server1\n    server3:T -- B:server2\n    db:R -- L:server3\n    db:T -- B:server1\n    disk:L -- R:server3</code></pre>"},{"location":"architecture/d4su-server/#other-database-storage-for-technical-data-related-to-spatial-units","title":"Other database storage for technical data related to Spatial Units","text":"<p>The proposed platform relies on Postgresql for the storage of data with a specific data model that will be outlined in the Data Model section. The data model is designed to accomodate IFC data but also other formats.</p> <p>There are alternative solutions or approaches for storing data that can - at a point in time - complement the proposed approach. The solutions hereunder have IFC as main or exclusive focus with the exception of Speckle that provides a complete integration platform for the AEC industry. </p>"},{"location":"architecture/d4su-server/#ifc2sql-in-ifcopenshell-ifcpatch-recipes","title":"ifc2sql - in IfcOpenShell / IfcPatch / Recipes","text":"<p>ifc2sql converts an IFC-SPF model to SQLite or MySQL. It is part of IfcOpenShell IfcPatch as a 'recipe'. The code is available on github. ifc2sql creates a table for each ifc entity.</p> <p>Development language: Python</p>"},{"location":"architecture/d4su-server/#ifcsql","title":"IfcSQL","text":"<p>ifcSQL is a database-schema for storing IFC-based models including the IFC data model schema of buildingSMART International. ifcSQL requires Microsoft SQLServer. It creates one table for Entities and a distinct table for each basetype of attributes.</p> <p>Development language: C#</p>"},{"location":"architecture/d4su-server/#bimserver","title":"BIMserver","text":"<p>BIMServer enables to store and manage the information of a construction (or other building related) project. Data is stored in the open data standard IFC. The BIMserver is not a fileserver, but it uses a model-driven architecture approach. This means that IFC data is stored as objects. You could see BIMserver as an IFC database, with special extra features like model checking, versioning, project structures, merging, etc. It use Berkeley DB which is an effective KeyValue store.</p> <p>Development language: Java</p>"},{"location":"architecture/d4su-server/#ifc-graph","title":"IFC-Graph","text":"<p>IFC-Graph is based on work described in the paper IFC-graph for facilitating building information access and query and enables to convert and IFC Model to a Labeled Property Graph (LPG) stored in the Graph Database Neo4j. It builds the graph with nodes for both entities and relationships (referred to repectively as 'full entities' and 'bridging entities'). Expectedly, processing time increases dramatically with the number of nodes.</p> <p>Development language: Python</p>"},{"location":"architecture/d4su-server/#speckle","title":"Speckle","text":"<p>Speckle Server positions itself as the data infrastructure for the AEC industry. Speckle is an open-source platform designed for the architecture, engineering, and construction (AEC) industries. It facilitates the exchange of data between various software applications and stakeholders involved in building design and construction projects. Speckle uses PostgreSQL as its primary database for storing and managing data. Speckle provides a python sdk Speckle | specklepy</p> <p>Development languages : C#, Typescript, Python</p>"},{"location":"architecture/references/","title":"References","text":""},{"location":"architecture/references/#tools","title":"Tools","text":""},{"location":"architecture/references/#apache-age","title":"Apache AGE","text":"<p>Apache AGE</p>"},{"location":"architecture/references/#apache-arrow-pyarrow","title":"Apache Arrow pyArrow","text":"<p>Apache Arrow - Filesystem Interface</p>"},{"location":"architecture/references/#bimcollab-zoom","title":"BIMCollab ZOOM","text":"<p>BIMCollab ZOOM</p>"},{"location":"architecture/references/#bimserver","title":"BIMserver","text":"<p>BIMServer</p>"},{"location":"architecture/references/#blender-with-bonsai","title":"Blender with Bonsai","text":"<p>Blender with Bonsai; see also the video on Youtube</p>"},{"location":"architecture/references/#celery","title":"Celery","text":"<p>A Distributed Task Queue in Python</p>"},{"location":"architecture/references/#fastapi","title":"FastAPI","text":"<p>A modern, fast (high-performance), web framework for building APIs with Python</p>"},{"location":"architecture/references/#ifc-graph","title":"IFC-Graph","text":"<p>IFC-Graph</p> <p>IFC-graph for facilitating building information access and query</p>"},{"location":"architecture/references/#ifcjson","title":"IfcJSON","text":"<p>Python Tool (on top of ifcOpenShell) to convert an IFC to a JSON (IFC2JSON) and a JSON to an IFC (JSON2IFC). IfcJSON has been built in the context of a larger project presented in IFC.JSON</p>"},{"location":"architecture/references/#ifc2sql","title":"ifc2sql","text":"<p>in IfcOpenShell / IfcPatch / Recipes</p> <p>ifc2sql converts an IFC-SPF model to SQLite or MySQL. It is part of IfcOpenShell IfcPatch as a 'recipe'. The code is available on github. ifc2sql creates a table for each ifc entity.</p>"},{"location":"architecture/references/#ifcopenshell","title":"IfcOpenShell","text":"<p>IfcOpenShell</p>"},{"location":"architecture/references/#ifcsql","title":"IfcSQL","text":"<p>ifcSQL</p>"},{"location":"architecture/references/#material-for-mkdocs","title":"Material for MkDocs","text":"<p>Material for MkDocs</p>"},{"location":"architecture/references/#openifcviewer","title":"OpenIFCViewer","text":"<p>OpenIFCViewer</p>"},{"location":"architecture/references/#phoenix","title":"Phoenix","text":"<p>Phoenix</p>"},{"location":"architecture/references/#postgresql","title":"PostgreSQL","text":"<p>PostgreSQL - A powerful, open source object-relational database</p>"},{"location":"architecture/references/#postgis","title":"PostGIS","text":"<p>PostGIS</p>"},{"location":"architecture/references/#redis","title":"Redis","text":"<p>An In-Memory Database used for Celery as Message Queue and Result Store</p>"},{"location":"architecture/references/#solibri-anywhere","title":"Solibri Anywhere","text":"<p>Solibri Anywhere</p>"},{"location":"architecture/references/#speckle","title":"Speckle","text":"<p>Speckle Server</p> <p>Speckle | specklepy</p>"},{"location":"architecture/references/#sqlmodel","title":"SQLModel","text":"<p>SQLModel is based on Python type annotations, and powered by Pydantic and SQLAlchemy</p>"},{"location":"architecture/references/#that-open","title":"That Open","text":"<p>ThatOpen (Web)</p>"},{"location":"data-model/classifications/","title":"More on Classifications","text":"<p>TO DO</p>"},{"location":"data-model/data-bundle/","title":"Data Bundle","text":""},{"location":"data-model/data-bundle/#data-bundle-as-a-bucket-of-ifc-entities","title":"Data Bundle as a Bucket of (IFC) Entities","text":"<pre><code>erDiagram\n    dataBundle\n    file\n    object\n    representation\n    propertySet\n    relationship\n    material [\"material &lt;: relationship\"]\n    space [\"space &gt;: object\"]\n    dataBundle ||..o{ dataBundle : \"parent\"\n    dataBundle ||--|{ file : \"import or export storage\"\n    bundleMembership\n    bundleMembership }|--|| dataBundle : member\n    bundleMembership }|--|| entity : member\n    entity ||..o| object : \"is a\"\n    entity ||..o| relationship : \"is a\"\n    entity ||..o| representation : \"is a\"\n    entity ||..o| propertySet : \"is a\"\n    entity ||..o| material : \"contains\"\n    entity ||..o| space : \"is a\"</code></pre> <p>A dataBundle (or a bundle for short) is the logical 'bucket' for all files and data related to a 'source' project (whether IFC or not).</p> <p>When an IFC is provided,  The bundle will keep track of the source file and of all transformations thereof (like e.g., an ifcJSON, a filtered ifCJSON, a derived IFC) and all the objects and the relationships originating from the source  or added thereafter in the database.</p> <p>An initial project may be complemented and enriched by new contributing source files. In that case, new information can be logically placed in a new bundle that will be a child of the initial bundle.</p>"},{"location":"data-model/data-bundle/#data-bundle-as-a-register-of-links-between-technical-data-and-the-spatial-unit","title":"Data Bundle as a register of links between technical data and the 'Spatial Unit'","text":"<pre><code>erDiagram\n    dataBundle\n    file\n    bundleUnit [\"bundleUnit: Site, Building, Storey, Space, Zone, Spatial Zone\"]\n    spatialUnit\n    spatialUnitBundle [\"spatialUnitBundle: junction between spatialUnit and bundle\"]\n    bundleUnit ||..o{ bundleUnit : \"parent or group\"\n    dataBundle ||..o{ dataBundle : parent\n    bundleUnit }|..|| dataBundle : \"\"\n    spatialUnitBundle |o..|| bundleUnit : \"\"  \n    dataBundle ||..|{ file : storage\n    spatialUnitBundle ||--|| spatialUnit : providesRoot\n</code></pre> <p>In this view, the dataBundle (or bundle for short) provides a summary of the core hierarchy and groups via</p> <p>bundleUnit</p> <ul> <li>and hierarchy thereof (parent -&gt; children)<ul> <li>site -&gt; building(s)</li> <li>building -&gt; storey(s)</li> <li>storey -&gt; space(s)</li> <li>site -&gt; spatialZone(s)</li> <li>building -&gt; spatialZone(s)</li> <li>storey -&gt; spatialZone(s)</li> </ul> </li> <li>and assignments thereof (group -&gt; member)<ul> <li>zone -&gt; zone(s)</li> <li>zone -&gt; space(s)</li> </ul> </li> </ul> <p>and the link with Spatial Unit is maintained in spatialUnitRoot which gives the unit and/or group that relate to the Spatial Unit</p>"},{"location":"data-model/ids/","title":"Information Delivery Specification (IDS)","text":"<p>The buildingSmart Information Delivery Specification (IDS) is a standard that defines the requirements for the exchange of information in Building Information Modeling (BIM) projects. It ensures that the right information is delivered at the right time throughout the lifecycle of a building or infrastructure project.</p> <p>Key usage of IDS:</p> <ul> <li>Requirements Definition: Specifies what information is needed, including data types, formats, and levels of detail.</li> <li>Validation: Ensures that the delivered information meets the specified requirements.</li> <li>Interoperability: Facilitates seamless data exchange between different software tools and platforms.</li> <li>Compliance: Ensures that the information delivery complies with industry standards and regulations.</li> <li>Documentation: Provides clear guidelines and documentation for stakeholders to understand and implement the IDS requirements.</li> </ul> <p>IDS helps in improving the quality and consistency of information exchanged in BIM projects, leading to better decision-making and project outcomes.</p> <p>Tecnically an IDS file uses an XML format that is both machine-readable and human-readable.</p> <p>Hereunder an extract of the 'info' section and of one 'specification' of the example file IDS_wooden-windows.ids. The specification is formulated for an IFC schema version IFC2X3, applies to an entity IFCMEMBER and states there must be at least 1 member of an IFCELEMENTASSEMBLY' of predefinedtype 'GIRDER'.  </p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;\n&lt;ids:ids xmlns:ids=\"http://standards.buildingsmart.org/IDS\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://standards.buildingsmart.org/IDS http://standards.buildingsmart.org/IDS/1.0/ids.xsd\"&gt;\n    &lt;ids:info&gt;\n        &lt;ids:title&gt;Wooden Windows&lt;/ids:title&gt;\n        &lt;ids:copyright&gt;NBvT&lt;/ids:copyright&gt;\n        &lt;ids:description&gt;An IDS of the Wooden Windows example.&lt;/ids:description&gt;\n        &lt;ids:date&gt;2022-02-08&lt;/ids:date&gt;\n        &lt;ids:milestone&gt;Design handover to manufactuer&lt;/ids:milestone&gt;\n    &lt;/ids:info&gt;\n    &lt;ids:specifications&gt;\n        &lt;!-- specification added to have at least one case of subType in the documenetation --&gt;\n        &lt;ids:specification ifcVersion=\"IFC2X3\" name=\"subTypeExample\"&gt;\n            &lt;ids:applicability minOccurs=\"1\" maxOccurs=\"unbounded\"&gt;\n                &lt;ids:entity&gt;\n                    &lt;ids:name&gt;\n                        &lt;ids:simpleValue&gt;IFCMEMBER&lt;/ids:simpleValue&gt;\n                    &lt;/ids:name&gt;\n                &lt;/ids:entity&gt;\n            &lt;/ids:applicability&gt;\n            &lt;ids:requirements&gt;\n                &lt;ids:partOf relation=\"IFCRELAGGREGATES\"&gt;\n                    &lt;ids:entity&gt;\n                        &lt;ids:name&gt;\n                            &lt;ids:simpleValue&gt;IFCELEMENTASSEMBLY&lt;/ids:simpleValue&gt;\n                        &lt;/ids:name&gt;\n                        &lt;ids:predefinedType&gt;\n                            &lt;ids:simpleValue&gt;GIRDER&lt;/ids:simpleValue&gt;\n                        &lt;/ids:predefinedType&gt;\n                    &lt;/ids:entity&gt;\n                &lt;/ids:partOf&gt;\n            &lt;/ids:requirements&gt;\n        &lt;/ids:specification&gt;\n    &lt;/ids:specifications&gt;\n&lt;/ids:ids&gt;\n</code></pre> <p>A lot of examples are available at BIMids</p> <p>There are also a lot of user friendly editors of IDS files. See the list of Tools Supporting IDS</p>"},{"location":"data-model/ifc-entities/","title":"IFC Entities","text":""},{"location":"data-model/ifc-entities/#introduction","title":"Introduction","text":"<p>IFC is a standardized, digital description of the built asset industry. It is an open, international standard (ISO 16739-1:2024) and promotes vendor-neutral, or agnostic, and usable capabilities across a wide range of hardware devices, software platforms, and interfaces for many different use cases.</p> <p>The current versions of IFC are IFC2X3, IFC4, IFC4X3 ADD2. There is also IFC5 which is under developement. From a technical perspective IFC5 with not rely anymore on the STEP file format and will adopt a JSON format and borrow concepts from USD (Universal Scene Description). Some functional / data changes are also in the make with some data content moving for relationships to objecs.</p> <p>So we will follow on with IFC5, but up to now what is presented here is valid for IFC&lt;5.</p>"},{"location":"data-model/ifc-entities/#entities-up-to-ifc4x3-add2-or-ifc5","title":"Entities (up to IFC4X3 ADD2, or IFC&lt;5)","text":"<p>There are several hundreds of entities in IFC and many detailed diagrams are available. The diagram here below presents a limited but helpful overview of significant IFC entities and relationships. The diagram is extracted from the paper Indoor navigation supported by the Industry Foundation Classes (IFC): A survey.</p> <p></p> <p>It exemplifies the hiearchical relationship IfcRelAggregates of:</p> <ul> <li>IfcProject</li> <li>IfcSite (one or many)</li> <li>IfcBuilding (one or many). An IfcBuilding can be an aggregate of several 'building (parts)' with a type<ul> <li>COMPLEX = building complex</li> <li>ELEMENT = building</li> <li>PARTIAL = building section</li> </ul> </li> <li>IfcBuildingStorey (one or many level(s)). An IFCBuildingStorey can also be an aggregate of several storey part(s):<ul> <li>COMPLEX: building storey complex</li> <li>ELEMENT: building storey</li> <li>PARTIAL: partial building storey</li> </ul> </li> <li>IfcSpace (one or many room(s) or parking(s) and combinations or parts thereof). Accordingly, the IfcSpace can also be a aggregate of several space part(s):<ul> <li>COMPLEX = space group</li> <li>ELEMENT = space</li> <li>PARTIAL = partial space</li> </ul> </li> </ul> <p>And also the hierarchical relationship IfcRelContainedInSpatialStructure, with elements typically contained in an IfcBuildingStorey such as:</p> <ul> <li>IfcWall</li> <li>IfcSlab</li> <li>IfcColumn</li> <li>IfcBeam</li> <li>IfcWindow</li> <li>IfcDoor</li> </ul> <p>Or elements typically contained in an IfcSpace such as:</p> <ul> <li>IfcFurnishingElement</li> <li>IfcTransportElement</li> <li>IfcDistributionElement</li> <li>IfcCovering</li> </ul> <p>It also exemplifies the IfcRelDefinedByProperties that links a propertySet with one or more element to which the propertySet applies.</p> <p>An last but not least it examplifies the IfcRelSpaceBoundary which relates the IfcSpace with its boundary (e.g., IfcWall).</p> <p>Not shown on that diagram, but quite important is the IfcRelReferencedInSpatialStructure which is used to assign elements in addition to those levels of the project spatial structure, in which they are referenced, but not primarily contained. This is illustated in the diagram below with a curtain wall contained in the spatial structure of the ground floor but also referenced in the spatial structures of the other floors.</p> <p></p>"},{"location":"data-model/ifc-entities/#further-information-to-be-found-in-the-official-ifc-documentation","title":"Further information to be found in the official IFC documentation","text":"<p>There are significantly more entities and relationship than those illustrated here. A reference documentation is available at   . From it, it is apparent that IFC covers most (not to say all) elements relevant to the technical documentation of 'Spatial Units'.</p> <p>From the documentation, it is also apparent that IFC is NOT just for Buildings but encompases Roads, Marine Facilities, Railway, ...</p> <p>See e.g., hereunder:</p> <ul> <li>Ports And Waterways</li> <li>Railways</li> <li>Roads</li> </ul>"},{"location":"data-model/ifc-entities/#ifc-and-citygml","title":"IFC and CityGML","text":"<p>Hereunder an informative diagram extracted from a very interesting paper on Automatic conversion of IFC datasets to geometrically and semantically correct CityGML LOD3 buildings  (../data-model/references.md#ifc-to-citygml)</p> <p></p>"},{"location":"data-model/ifc-entities/#a-condensed-model-for-ifc-or-other-models-of-technical-data-for-spatial-units","title":"A Condensed Model for IFC or other Models of Technical Data for 'Spatial Units'","text":"<pre><code>erDiagram\n    object\n    representation\n    relationship\n    relatingEntity\n    relatedEntity\n    propertySet\n    space [\"space &gt;: object\"]\n    objectType\n    relationshipType\n    objectType ||--o{ object : typeOf\n    relationshipType ||--o{ relationship : typeOf \n    object ||--o{ representation : has\n    object ||..o| space : \"\"\n    relationship ||--|| relatingEntity : characterize\n    relationship ||--|{ relatedEntity : apply_to\n    relatingEntity ||--|| object : is\n    relatingEntity ||--|| propertySet  : is\n    relatingEntity ||--|| space : is\n    relatedEntity ||--|| object : is\n</code></pre> <p>The proposed condensed model preserves all the information contained in the IFC file/model and organizes the storage in 4 main 'groups':</p> <ul> <li>Objects</li> <li>Representations (aka geometries)</li> <li>Property Sets</li> <li>Relationships</li> </ul> <p>An object is everything that does not fall into one of the other three 'groups'.</p> <p>A representation may exist for an object in the IfcProduct category such as Wall, Slab, Column, Beam, Window, Door, ... and contain the information necessary to provide a 3D rendering of the object. In the object group of the proposed condensed model, not all items are IfcProducts and have a representation. E.g., a an IfcProject does not have and does not need a representation.  </p> <p>An IfcRelationship has one Relating Entity and one or more Related Entity(ies). For instance the decomposition of a Building in Storeys is documented by an instance of a relationship of type IfcRelAggregates with the IfcBuilding as the Relating Entity and the IfcBuildingStoreys as the Related Entities. There are tens of types of relationships that follow the same pattern of 'relating' and 'related' element. This is both flexible and general.</p>"},{"location":"data-model/ifc-types/","title":"IFC Types","text":""},{"location":"data-model/introduction/","title":"Concepts and Data Model","text":"<p>To make a long story short,</p> <ul> <li>the concepts apply to both IFC and the d4SU data base</li> <li>the data model applies to the the d4SU data base only</li> </ul> <p>The sections under this heading provide a short introduction to the topics, but do not dispense from the reference BIM/IFC documentation for advanced use cases.</p>"},{"location":"data-model/materials/","title":"More on Materials","text":""},{"location":"data-model/materials/#introduction","title":"Introduction","text":"<p>In ifcJSON (for Ifc&lt;5), the link between the IfcBuildingElement (Wall, Slab, Column, Beam, Door, Window, Covering, ...) and the Materials is made via the IfcRelAssociatesMaterial relationship where the relatedObjects are the concerned IfcBuildingElement and the relatingMaterial is expanded on the relationship itself and not as a distinct elements with a GlobalId (GUID).</p> <p>In IFC5, this will apparently change, with Material becoming an 'object' on it own.</p> <pre><code>flowchart TB\n    subgraph relationship\n        subgraph relatingMaterial\n            IfcMaterialSelect([IfcMaterialSelect])\n            IfcMaterialSelect --o IfcMaterialLayerSetUsage\n            IfcMaterialSelect --o IfcMaterialLayerSet\n            IfcMaterialSelect --o IfcMaterialLayer\n            IfcMaterialSelect --o IfcMaterial\n            IfcMaterialLayerSetUsage --o IfcMaterialLayerSet\n            IfcMaterialLayerSet --o IfcMaterialLayer\n            IfcMaterialLayer --o IfcMaterial\n        end\n        IfcRelAssociatesMaterial --o IfcMaterialSelect\n    end\n    subgraph relatedObjects\n        IfcBuildingElement[\"IfcWall,&lt;br/&gt;IfcSlab,&lt;br/&gt;IfcColumn,&lt;br/&gt;IfcBeam,&lt;br/&gt;IfcDoor,&lt;br/&gt;IfcWindow,&lt;br/&gt;...\"]\n    end\n    IfcRelAssociatesMaterial -- referenced via globalId --o IfcBuildingElement</code></pre> <p>This diagram is a simplification. Practically, The official 4.3.2.0 documentation for \"IFC 4.3\". is the source of detailed information.</p> <p>There is the assignment of a Material to an Object (IfcMaterialList is deprecated in IFC4)</p> <p></p> <p>There is also the Layering</p> <p></p> <p>IFC Material Layer Set Usage for a Wall:</p> <p></p> <p>IFC Material Layer Set Usage for a Slab:</p> <p></p> <p>A Material can be styled:</p> <p></p>"},{"location":"data-model/notes-on-ifc5/","title":"Notes on IFC5","text":"<p>This is on the TODO list.</p>"},{"location":"data-model/physical-model/","title":"Physical Model - Tables","text":""},{"location":"data-model/physical-model/#introduction","title":"Introduction","text":"<pre><code>erDiagram\n\n    spatialUnit {\n        uuid    id PK\n        string  name\n        string  type\n        string  description\n        json    unitGuide \"'User Guide' for the spatialUnit\"\n    }\n    bundle {\n        int     id PK\n        int     parentId\n        string  name\n        json    files\n        json    jsonInDBHeader\n        string  description\n        bool    active\n    }\n\n    object {\n        int     bundleId \"part of PK\"\n        uuid    objectId \"part of PK\"\n        string  type\n        string  name\n        array   representationIds \"array of str(uuid)\"   \n        json    elementJson \"contains the object placement data\"\n\n    }\n    object ||--o{ representation : has\n\n    representation {\n        int         bundleId \"part of PK\"\n        uuid        representationId \"part of PK\"\n        string      type\n        json        elementJson \"contains the shape representation data\" \n        geometry    geom \"geometry column for PostGIS\"\n    }\n\n    propertySet {\n        int     bundleId \"part of PK\"\n        uuid    propertySetId \"part of PK\"\n        string  name\n        json    elementJson\n    }\n\n    relationship {\n        int     bundleId \"part of PK\"\n        uuid    relationshipId \"part of PK\"\n        string  type\n        string  relatingType\n        uuid    relatingId \"part of FK\"        \n        json    elementJson\n    }\n    relationship }|..|| object : relating\n    relationship }|..|| propertySet : relating\n\n    relatedMembership {\n        uuid    id PK\n        int     bundleId \"part of FK\"\n        uuid    relationshipId FK \"part of FK\"\n        string  objectType\n        uuid    objectId \"part of FK\"    \n    }\n    relatedMembership }|--|| relationship : \"\"\n    relatedMembership }|--|| object : related\n\n    bundleUnit {\n        uuid5   bundleunit_id PK  \"The Id as a hash of all columns except unitJson\"\n        int     bundle_id \"The Id of the bundle\"\n        uuid    unit_id \"The Id if the Object \"\n        string  unitType \"The type of the Object (e.g. IfcSpatiaZone)\"\n        string  unitName \"The name of the object (e.g. Apartment 01-09)\"\n        string  relationship_type \"The type of the relationship (e.g. 'IfcRelAggregates)\"\n        uuid    parent_id \"The Id of the Parent\"\n        string  parent_type \"The type of the parent (e.g. 'IfcBuildingStorey')\"\n        json    unitJson \"Information that is specific to the type\"\n    }\n    bundleUnit }o..|{ object : \"member\" \n    bundleUnit }|--|| bundle : \"\"\n\n    spatialUnitBundleUnit {\n        uuid    id PK\n        uuid    spatialUnitId\n         int    bundleId FK\n        uuid    bundleUnitEdgeId FK\n    }\n    spatialUnitBundleUnit }|--|| spatialUnit : \"\"\n    spatialUnitBundleUnit }|--|| bundle:  \"\"\n    spatialUnitBundleUnit }|--|| bundleUnit:  \"\"\n\n    bundleJournal {\n        uuid    id PK\n        int     bundleId FK\n        json    operationJson  \n    }\n    bundleJournal }|--|| bundle : entry</code></pre> <pre><code>erDiagram\n    bundleHistory {\n        uuid    id PK\n        int     bundleId\n        uuid    parentId\n        string  name\n        string  source\n        string  sourceHeader\n        bool    active\n    }\n    elementHistory {\n        uuid    id PK\n        int     bundleId\n        string  elementType\n        uuid    elementId\n        json    elementJson\n        int     version\n    }\n</code></pre> <p>spatial_ref_sys table</p> <p>In PostgreSQL, the table model also contains a table 'spatial_ref_sys' that is created by the PostGIS extension.</p> <p>the physical model is based on ifcJSON</p> <p>The model hereunder does not allocate IFC entities to DB tables but allocates ifcJSON entities to DB tables. The ifcJSON entities already aggregate a number of IFC entities. For instance, some ifcJSON relationships contain the data pertaining to one side of the relationship.</p> <p>The physical model is articulated around simple principles:</p> <ul> <li>The entities are those provided by the ifc2json transformation</li> <li>The the ifc2json transformation is assumed to be lossless with respect to  information that matters for Spatial Units; - if not, the transformation must be enhanced</li> <li>Items from the ifc2json are distributed in 4 blocks:<ul> <li>object - applies to all items that are not in one of the 3 other groups</li> <li>representation</li> <li>propertySet (including IfcPropertySet and IfcElementQuantity)</li> <li>relationship</li> </ul> </li> <li>All information from the ifc2json source is preserved. Each items keeps the totality of its original data into an elementJson field</li> </ul> <p>One of the reasons for this choice is that data in the json can easily be accessed (as a python dictionary, a python pandas DataFrame or as a result of a postgres 'sql', or all combined).</p> <p>So access is easy, provided that the structure is expected and understood.</p> <p>Generally speaking, data processing that need to enhance entities or apply algorithms on the entities have an understanding of the data. They can therefore easily access and process the content of the the json.</p> <p>But other treatments might just not care about these entities and would be confused by details that they don't need.</p>"},{"location":"data-model/physical-model/#tables","title":"Tables","text":"<p>All tables details can be found under src/model with their pydantic definition.</p>"},{"location":"data-model/physical-model/#spatial-unit","title":"Spatial Unit","text":"<p>The Spatial Unit acts as a relay for the Spatial Unit in the external adminirative system. The other tables will reference the id of this Spatial Unit which is turn will - when needed or convenient -- hold an external id for the external Spatial Unit.</p>"},{"location":"data-model/physical-model/#bundle","title":"Bundle","text":"<p>The bundle (elsewhere referred to as the dataBundle)  is the logical 'bucket' for all files and data related to a 'source' project (whether IFC or not). It maintains a list of all files processed in relationship to the bundle.</p>"},{"location":"data-model/physical-model/#bundle-journal","title":"Bundle Journal","text":"<p>The bundle journal keeps track of all operations that have been performed in relation with the bundle. This can be e.g.,</p> <ul> <li>import the source IFC</li> <li>transform the IFC in an elementJson</li> <li>filter the elementJson</li> <li>store the elementJson content in the database</li> </ul>"},{"location":"data-model/physical-model/#bundle-unit","title":"Bundle Unit","text":"<p>The table stores the graph structure and the groups of entities that can be referred to by a Spatial Unit, namely the Site(s), Building(s), Storey(s), Space(s), Zone(s) and Spatial Zone(s). The same unit can be present multiple times. For instance, a  'Kitchen' space may be linked to the 'Apartment' SpatialZone to which it belongs via an 'IfcRelReferencedInSpatialStructure' relationship while being also linked to the containing 'Storey' via an 'IfcRelAgreggates' relationship.</p> <p>The Id/PK (bundleunit_id) is based on a hash of all columns except the unitJson (and the technical data such as 'created_at' and 'updated_at'). The idea is that an update applies to the combination of these elements, and if one of them changes it must be an 'insert' or a 'delete old' + 'insert new'.</p>"},{"location":"data-model/physical-model/#spatial-unit-bundle-unit-junction-between-a-spatial-unit-and-a-bundle-unit","title":"Spatial Unit Bundle Unit (junction between a spatial unit and a bundle unit)","text":"<p>Makes the junction between a Spatial Unit and a BundleIUnit.</p>"},{"location":"data-model/physical-model/#bundle-membership-included-in-the-primary-key-of-elements","title":"Bundle Membership included in the primary key of elements","text":"<p>We don't use a junction table between the bundle and the elements of the bundle (object, representation, propertySet and relationship). Instead, we use the bundleId in the primary key of its elements (object, representation, propertySet, relationship) so that the primary key of an element is (bundleId, elementId). </p> <p>For the elementId's we prefer to keep the uuid provided by the IFC GUID (globalId) in its extended form. </p> <p>This GUID is technically unique but may be used repeatedly in different contexts. For instance, an IfcWall with a given GUID could appear for that wall in distinct IFC's for the design, construction and as-built phases. And there could be variations in the IfcWall data. </p> <p>Also the discussion on the buildingSMART forum about GUIDs in an BIM Project brings additional perspective on the use of the guid: in a federation of IFC from distinct disciplines, the same GUID could be used for the given IfcWall but with a different use.</p> <p>Therefore, the GUID will bear a unicity property only within a given bundle and a convenient unique key will be provided by (bundleId, elementId) dispensing from using a junction table. </p> <p>Also, comparison across bundles could help identify variations in a specific element or help in federating different views, but with no guarantee as made clear in the discussion GUIDs in an BIM Project where an example is given of a project with multiple disciplines using different tools and producing distincts GUIDs for the same element.</p>"},{"location":"data-model/physical-model/#object","title":"Object","text":"<p>Contains all of the items not in Represention, PropertySet or Relationship.</p>"},{"location":"data-model/physical-model/#representation","title":"Representation","text":"<p>Contains the items for the products that have one or more shape representation(s) (support for the 3D rendering and for measurement). Representations are separated from the product themselves which are in the object table. The separation is mainly for data management purpose: not all processes need the representation and several applications / model sources do not have shape representations. The representation table has a 'Geometry' column that is intended to support geometry related functions.</p> <p>To be challenged: the local placement is in the Object table and the geometry in the Representation table.</p>"},{"location":"data-model/physical-model/#propertyset","title":"PropertySet","text":"<p>Contains the propertySets and elementQuantities that apply to one or more other items.</p>"},{"location":"data-model/physical-model/#relationship","title":"Relationship","text":"<p>All types of Relationships are stored in the same table with a structure that account for</p> <ul> <li>the type of the relationship</li> <li>the id of the unique relating item</li> <li>the type of the relating item</li> <li>the elementJson of the source relationship</li> </ul> <p>The list of the related items is included in the elementJson and is also expanded in the Related Membership table.</p> <p>When applying a filter on the import (or when creating a dependent bundle), some elements in the original IFC will be filtered out and will not remain in the bundle. This means that a relationship with a relating element in the the bundle may originally contain references to related elements that have been filtered out. In that case, the relationship is pruned for the references to the missing related elements. Therefore the database may contain different versions of a relationship with the same globalId (uuid of the relationship). To access the version of the relationship relevant for a bundle, it is necessary to give  both the bundleId and the relationshipId.</p> <p>The column for the relating_id may be null. Indeed for IfcRelAssociateMaterial, the relating material is in the relationship itself.</p>"},{"location":"data-model/physical-model/#related-membership","title":"Related Membership","text":"<p>The table expand the relationships with one row per related item in de relationship. This is more convenient for SQL based queries.</p> <p>As noted hereinabove the related membership exist for a combination of a bundleId and relationshipId (globalId of the relationship).</p> <p>For some relationships, there are no related item. This is the case for IfcRelSpaceBoundary for a virtual boundary.</p>"},{"location":"data-model/physical-model/#bundle-history","title":"Bundle History","text":"<p>If a bundle is dropped,</p> <ul> <li>the detailed data pertaining the bundle (object, relationhips, ...) are deleted</li> <li>the summary data of that bundle is moved to the history table. Therefore, the links to the source and transformed file(s) is maintained</li> </ul> <p>This is not activated and tested at this stage. It is more a placeholder to remember to address this topic more in depth</p>"},{"location":"data-model/physical-model/#elements-history","title":"Elements History","text":"<p>The idea is that each time an element is modified, the before update version is saved in this history.</p> <p>This is not activated and tested at this stage. It is more a placeholder to remember to address this topic more in depth</p>"},{"location":"data-model/properties/","title":"More on Properties and Quantities","text":""},{"location":"data-model/properties/#properties","title":"Properties","text":"<p>Properties in IFC are specific attributes or characteristics assigned to elements that describe their physical and functional aspects.</p> <p>Properties are grouped into property sets (Psets), which are collections of related properties. For example, a property set for a door might include properties like fire rating, material, and manufacturer.</p> <p>While IFC provides a set of predefined properties and property sets, users can also define custom properties to meet specific project requirements. This flexibility allows for the inclusion of unique attributes that are important for particular use cases.</p> <p>Additionally, properties combined with types make it possible to extend the class system as illustrated hereunder.</p> <p></p> <p>For intance, an IfcSpatialZone may be typed to be descriptive of specific attributes of a Land Administration Spatial Unit such as a Parking, a Private Apartment, Common part in a Condominium.</p> <p>So we could have:</p> <pre><code>flowchart TB\n    spatialZone[\"object: IfcSpatialZone\"]\n    spatialZoneType[\"object: IfcSpatialZoneType | Private Parts - Apartment\"]\n    propertySet[\"propertyset: Pset_B_logBook_PrivateApartment\"]\n    relDefinesByProperties[\"relationship: IfcRelDefinesByProperties\"]\n    relDefinesByType[\"relationship: IfcRelDefinedByType\"]\n    relDefinesByType -- relating --o spatialZoneType\n    relDefinesByType -- related --o spatialZone\n    relDefinesByProperties -- related --o spatialZone\n    relDefinesByProperties -- relating --o propertySet\n    spatialZoneType -- hasProperties --o propertySet</code></pre> <p>IfcSpatialZoneType</p> <pre><code>{\n  \"type\": \"IfcSpatialZoneType\",\n  \"globalId\": \"583ddead-dd04-4173-8a6b-bb8272551f4a\",\n  \"name\": \"Private Parts - Apartment\",\n  \"tag\": \"0003456\",\n  \"hasPropertySets\": [\n    {\n      \"type\": \"IfcPropertySet\",\n      \"ref\": \"36fea888-7a8f-4167-b00e-32dfb69fc9dc\"\n    }\n  ],\n  \"predefinedType\": \"NOTDEFINED\"\n}\n</code></pre> <p>Propertyset</p> <pre><code>{\n  \"type\": \"IfcPropertySet\",\n  \"globalId\": \"36fea888-7a8f-4167-b00e-32dfb69fc9dc\",\n  \"name\": \"Pset_B_logBook_PrivateApartment\",\n  \"hasProperties\": [\n    {\n      \"type\": \"IfcPropertySingleValue\",\n      \"name\": \"NbrSleepingRooms\",\n      \"nominalValue\": {\n        \"type\": \"IfcPositiveInteger\",\n        \"value\": 3\n      }\n    }\n  ]\n}\n</code></pre> <p>Typical types of nominalValue:</p> <ul> <li>IfcBinary</li> <li>IfcBoolean</li> <li>IfcDate</li> <li>IfcDuration</li> <li>IfcIdentifier</li> <li>IfcInteger</li> <li>IfcLabel</li> <li>IfcPositiveInteger</li> <li>IfcReal</li> <li>IfcText</li> </ul>"},{"location":"data-model/properties/#quantities","title":"Quantities","text":"<p>In the context of the Industry Foundation Classes (IFC) schema, IfcQuantities refer to a set of predefined measurable properties that describe the physical characteristics of building elements. These quantities are essential for various purposes, including cost estimation, material takeoff, and construction planning. Common types of quantities include length, area, volume, weight, and count. </p> <p>An IfcElementQuantity defines a set of derived measures of an element's physical property. Elements could be spatial structure elements (like buildings, storeys, or spaces) or building elements (like walls, slabs, finishes). The IfcElementQuantity gets assigned to the element by using the IfcRelDefinesByProperties relationship.</p> <p>There is also an IfcQuantitySet but unlike the IfcPropertySet, it is an abstract class.</p> <p>In the same way as IfcPropertySet, the IfcElementQuantity relates to the elements to which it applies as a relating element in the IfcRelDefinesByProperties</p> <pre><code>flowchart TB\n    spatialZone[\"object: IfcSpatialZone\"]\n    propertySet[\"propertyset: IfcElementQuantity\"]\n    relDefinesByProperties[\"relationship: IfcRelDefinesByProperties\"]\n    relDefinesByProperties -- related --o spatialZone\n    relDefinesByProperties -- relating --o propertySet</code></pre>"},{"location":"data-model/properties/#books","title":"Books","text":"<p>Many Land Administration examples in the book chapter hereunder</p> <p>BIM-Enabled 3D Digital Urban Land Administration -- New Era in Managing Cities in Rajabifard, A., et al. BIM and Urban Land Administration. 1st ed., CRC Press, 2019.</p>"},{"location":"data-model/references/","title":"References","text":""},{"location":"data-model/references/#books","title":"Books","text":""},{"location":"data-model/references/#bim-enabled-urban-land-administration","title":"BIM-Enabled Urban Land Administration","text":"<p>BIM-Enabled 3D Digital Urban Land Administration -- New Era in Managing Cities in Rajabifard, A., et al. BIM and Urban Land Administration. 1st ed., CRC Press, 2019, https://doi.org/10.1201/9781351032346</p>"},{"location":"data-model/references/#bim-ifc-based-3d-spatial-model-for-condominium-ownership","title":"BIM IFC-based 3D spatial model for condominium ownership","text":"<p>Liu, C., Zhu, H., Li, L., Ma, J., &amp; Li, F. (2023). BIM/IFC-based 3D spatial model for condominium ownership: A case study of China. Geo-Spatial Information Science, 27(5), 1638\u20131656. https://doi.org/10.1080/10095020.2023.2246518</p>"},{"location":"data-model/references/#building-information-modeling","title":"Building Information Modeling","text":"<p>Borrmann, A., Berkhahn, V. (2018). Principles of Geometric Modeling. In: Borrmann, A., K\u00f6nig, M., Koch, C., Beetz, J. (eds) Building Information Modeling. Springer, Cham. https://doi.org/10.1007/978-3-319-92862-3_2</p>"},{"location":"data-model/references/#papers","title":"Papers","text":""},{"location":"data-model/references/#indoor-navigation","title":"Indoor navigation","text":"<p>Indoor navigation supported by the Industry Foundation Classes (IFC): A survey</p>"},{"location":"data-model/references/#3d-spatially-enabled-land-administration-database","title":"3D spatially enabled land administration database","text":"<p>An IFC-based database schema for mapping BIM data into a 3D spatially enabled land administration database</p>"},{"location":"data-model/references/#ifc-to-citygml","title":"IFC to CityGML","text":"<p>Automatic conversion of IFC datasets to geometrically and semantically correct CityGML LOD3 buildings</p>"},{"location":"data-model/references/#ifc","title":"IFC","text":""},{"location":"data-model/references/#ports-and-waterways","title":"Ports and Waterways","text":"<p>Ports And Waterways</p>"},{"location":"data-model/references/#railways","title":"Railways","text":"<p>Railways</p>"},{"location":"data-model/references/#roads","title":"Roads","text":"<p>Roads</p>"},{"location":"data-model/references/#ifc-materials","title":"IFC Materials","text":"<p>Materials / The official 4.3.2.0 documentation for \"IFC 4.3\".</p>"},{"location":"data-model/references/#ifcspace","title":"IFCSpace","text":"<p>IfcSpace - The official 4.3.2.0 documentation for \"IFC 4.3\".</p>"},{"location":"data-model/references/#ifcrelspaceboundary","title":"IfcRelSpaceBoundary","text":"<p>As documented in IfcRelSpaceBoundary - The official 4.3.2.0 documentation for \"IFC 4.3\".</p>"},{"location":"data-model/references/#ifczone","title":"IfcZone","text":"<p>As documented in IfcZone - The official 4.3.2.0 documentation for \"IFC 4.3\".</p>"},{"location":"data-model/references/#ifcspatialzone","title":"IfcSpatialZone","text":"<ul> <li>IfcSpatialZone - The official 4.3.2.0 documentation for \"IFC 4.3\".</li> <li>IfcSpatialZone PropertySets - The official 4.3.2.0 documentation for \"IFC 4.3\".</li> <li>IFC Spatial Zone Requirements and Implementation</li> </ul>"},{"location":"data-model/references/#ids","title":"IDS","text":"<p>Information Delivery Specification (IDS)</p> <p>Tools supporting IDS</p> <p>IDS on Github</p> <p>IDS example file: IDS_wooden-windows.ids</p>"},{"location":"data-model/references/#forums","title":"Forums","text":""},{"location":"data-model/references/#guids-in-a-bim-project","title":"GUIDs in a BIM Project","text":"<p>GUIDs in an BIM Project</p>"},{"location":"data-model/references/#technical-references","title":"Technical References","text":""},{"location":"data-model/references/#ifcopenshell-geometry","title":"IfcOpenShell Geometry","text":"<ul> <li>IfcOpenShell Geometry processing</li> <li>IfcOpenShell Geometry creation</li> </ul>"},{"location":"data-model/references/#voxelization-toolkit","title":"Voxelization Toolkit","text":"<p>Voxelization Toolkit</p>"},{"location":"data-model/references/#postgis-documentation","title":"PostGIS Documentation","text":"<p>PostGIS Documentation</p>"},{"location":"data-model/references/#geoalchemy2","title":"GeoAlchemy2","text":"<p>GeoAlchemy2</p>"},{"location":"data-model/references/#shapely","title":"Shapely","text":"<p>Shapely</p>"},{"location":"data-model/references/#geos","title":"GEOS","text":"<p>GEOS</p>"},{"location":"data-model/representations/","title":"Representations","text":""},{"location":"data-model/representations/#introduction","title":"Introduction","text":"<p>An IfcProduct can have a representation. The IfcRepresentationItem  conveys the representation data and can take a variety of forms that each calls for specific technical handling. Indeed we have IfcBoundingBox, IfcExtrudedAreaSolid, IfcGeometricCurveSet, IfcFaceBasedSurfaceModel, IfcMappedItem, ... to name a few. Also Tessellation is available as of IFC4. This introduces a simple Mesh geometry where every shape is approximated by a set of non overlaping triangles. It will be convenient - or necessary - to reduce the variety of representations used in the IFC for the submission process. Alternatively, applying IfcOpenshell tessellation might help. It is worth noting that in IFC5, Mesh geometry will be at the core (base/default geometry)  </p> <p>An overview of the IFC geometry is provided in Building Information Modeling.</p> <pre><code>flowchart TB\n    IfcObject --o IfcProduct\n    IfcProduct --o IfcElement\n    IfcProduct --o IfcSpatialElement\n    subgraph spatialelement\n        IfcSpatialElement --o IfcSpatialZone\n        IfcSpatialElement --o IfcSpatialStructureElement\n        IfcSpatialStructureElement --o spElem[\"IfcSite,&lt;br/&gt;IfcBuilding,&lt;br/&gt;IfcBuildingStorey,&lt;br/&gt;IfcSpace\"]\n    end \n    subgraph element\n        IfcElement --o IfcBuildingElement\n        IfcElement --o IfcDistributionElement\n        IfcBuildingElement --o elem[\"IfcWall,&lt;br/&gt;IfcSlab,&lt;br/&gt;IfcColumn,&lt;br/&gt;IfcBeam,&lt;br/&gt;IfcDoor,&lt;br/&gt;IfcWindow,&lt;br/&gt;...\"] \n    end \n    IfcProduct --o IfcProductRepresentation\n    subgraph representation\n        IfcProductRepresentation --o IfcProductDefinitionShape \n        IfcProductDefinitionShape --o IfcShapeRepresentation\n        IfcShapeRepresentation --o IfcRepresentationItem\n        IfcRepresentationItem --o IfcGeometricRepresentationItem\n        IfcGeometricRepresentationItem --o item[\"IfcBoundingBox,&lt;br/&gt;IfcExtrudedAreaSolid,&lt;br/&gt;IfcGeometricCurveSet,&lt;br/&gt;IfcFaceBasedSurfaceModel,&lt;br/&gt;IfcMappedItem,&lt;br/&gt;...&lt;br/&gt;,&lt;br/&gt;Tessellation&lt;br/&gt;\"] \n    end </code></pre> <p>In our workflow, the geometry is created in the AEC Tool and preserved along the tranformation so that it can be rendered in a standard Ifc Viewer. Up to a point, this appears as a non issue.  </p> <p>Ingress flow:</p> <pre><code>flowchart LR\n    AECTool --&gt; IFC\n    AecGeo[\"Create Geometry\"] --&gt; AECTool \n    IFC --&gt; Python \n    Python --&gt; IfcJSON\n    IfcJSON --&gt; Python\n    Python --&gt; DB \n    style AecGeo fill:#148F77</code></pre> <p>Egress flow:</p> <pre><code>flowchart LR\n    DB  --&gt; Python\n    Python --&gt; IfcJSON\n    IfcJSON --&gt; Python\n    Python --&gt; IFC\n    IFC --&gt; IfcViewer\n    ViewGeo[\"Visualize Geometry\"]\n    IfcViewer --&gt; ViewGeo\n    style ViewGeo fill:#148F77</code></pre> <p>That's fine, until we need to handle specific geometric aspects. Which is a requirement with most administrative processes. When we create an IfcSpatialZone, we will eventually need a represenation derived from IfcRelReferencedInSpatialStructure elements.</p> <p>There we have several possibilities to explore:</p> <ul> <li>Use IfcOpenShell Geometry in Python (Python wrapper above CGAL and OpenCascade); possibly also use the Voxelization capabilities</li> <li>le the geometry during the import &amp; transform</li> <li>Use PostGIS Geometry in the DB; PostGIS uses GEOS which can also be accessed via Shapely</li> <li>Use an external Tool when an Agent must perform adjustments</li> </ul> <p>Transformation flow:</p>"},{"location":"data-model/representations/#execute-a-tessellation-during-the-ingress-flow","title":"Execute a tessellation during the ingress flow","text":"<pre><code>flowchart LR\n    AECTool --&gt; IFC\n    AecGeo[\"Create Geometry\"] --&gt; AECTool \n    IFC --&gt; Python \n    Python --&gt; Tessellation\n    Tessellation --&gt; Python\n    Python --&gt; IfcJSON\n    IfcJSON --&gt; Python\n    Python --&gt; DB \n    style AecGeo fill:#148F77\n    style Tessellation fill:#a14b45</code></pre>"},{"location":"data-model/representations/#execute-tessellation-or-other-transformation-on-an-as-needed-basis","title":"Execute tessellation or other transformation on an as-needed basis","text":"<pre><code>flowchart TB\n    DbGeom[\"PostGIS Geometry\"]\n    DbGeom --&gt; DB\n    DB  -- Read IfcJSON --&gt; Python\n    Python -- Store IfcJSON --&gt; DB\n    IfcGeom[\"IfcOpenShell Geometry&lt;br/&gt;incl. tessellate\"] \n    IfcGeom --&gt; Python \n    Python -- Export --&gt; IFC\n    IFC -- Import in sub-bundle --&gt; Python\n    IFC &lt;-- Update --&gt; ExternalApp[\"External Application&lt;br/&gt;e.g. Blender with Bonsai\"]\n    IFC --&gt; IfcViewer\n    ViewGeo[\"Visualize Geometry\"]\n    IfcViewer --&gt; ViewGeo\n    style ViewGeo fill:#148F77\n    style IfcGeom fill:#a14b45\n    style DbGeom fill:#a14b45\n    style ExternalApp fill:#a14b45</code></pre>"},{"location":"data-model/representations/#impact-on-the-data-model","title":"Impact on the data model","text":"<p>With PostGIS, we only need to add a column of type Geometry.</p> <p>In the paper An IFC-based database schema for mapping BIM data into a 3D spatially enabled land administration database the authors have elected a model which maps key IFC entities and add a Geometry column to most of them.</p> <p>In our Physical Data Model, we have elected to keep the number of tables quite small.  We have one representation table to which we have added the Geometry column.</p> <p>Further to that, the intent is to use the Geometry Column only for a limited number of object types, starting with IfcSpace and IfcSpatialZone.</p> <p>In the IfcModels used as examples, we have observed a large variety of options used for representing an IfcSpace geometry. This variety will impact the mapping of the representation in the IfcJSON to the format used by PostGIS Geometry.</p> <p>What we have in the data model is</p> <pre><code>erDiagram\nobject {\n        int     bundleId \"part of PK\"\n        uuid    objectId \"part of PK\"\n        string  type\n        string  name\n        array   representationIds \"array of str(uuid)\"   \n        json    elementJson \"contains the object placement data\"\n\n    }\n    object ||--o{ representation : has\n\n    representation {\n        int         bundleId \"part of PK\"\n        uuid        representationId \"part of PK\"\n        string      type\n        json        elementJson \"contains the shape representation data\" \n        geometry    geom \"geometry column for PostGIS\"\n    }</code></pre>"},{"location":"data-model/representations/#technical-references","title":"Technical References","text":"<ul> <li>IfcOpenShell Geometry processing</li> <li>IfcOpenShell Geometry creation</li> <li>Voxelization Toolkit</li> <li>PostGIS Documentation</li> <li>GeoAlchemy2</li> <li>Shapely</li> <li>GEOS</li> </ul>"},{"location":"data-model/representations/#books","title":"Books","text":"<p>Borrmann, A., Berkhahn, V. (2018). Principles of Geometric Modeling. In: Borrmann, A., K\u00f6nig, M., Koch, C., Beetz, J. (eds) Building Information Modeling. Springer, Cham.</p>"},{"location":"data-model/spaces-zones-and-spatialzones/","title":"More on Ifc Spaces, Zones, Spatial Zone and Spatial Units","text":""},{"location":"data-model/spaces-zones-and-spatialzones/#introduction","title":"Introduction","text":""},{"location":"data-model/spaces-zones-and-spatialzones/#spaces-in-the-spatial-structure-of-a-construction","title":"Spaces in the Spatial Structure of a construction","text":"<p>As documented in The official 4.3.2.0 documentation for \"IFC 4.3\"., a space represents an area or volume bounded actually or theoretically. Spaces are areas or volumes that provide for certain functions within a building.</p> <p>A space is associated to a building storey (or in case of exterior spaces to a site). A space may span over several connected spaces. Therefore a space group provides for a collection of spaces included in a storey. A space can also be decomposed in parts, where each part defines a partial space. This is defined by the CompositionType attribute of the supertype IfcSpatialStructureElement which is interpreted as follow:</p> <ul> <li>COMPLEX = space group</li> <li>ELEMENT = space</li> <li>PARTIAL = partial space</li> </ul> <p></p> <p>In a building, a space will typically correspond to one of:</p> <ul> <li>a room (living room, kitchen, corridor, bathroom, ...)</li> <li>an office space</li> <li>a commercial surface</li> <li>a workshop</li> <li>a parking</li> </ul>"},{"location":"data-model/spaces-zones-and-spatialzones/#space-boundaries","title":"Space Boundaries","text":"<p>A space is delimited by physical or virtual boundaries.</p> <p></p> <p>As documented in The official 4.3.2.0 documentation for \"IFC 4.3\"., space boundaries are always defined as seen from the space. In general two basic types of space boundaries are distinguished:</p> <ul> <li>1st level space boundary: defined as boundaries of the space, not taking into account any change in building element or spaces on the other side.</li> <li>2nd level space boundary: defined as boundary taking any change in building element or spaces on the other side into account. It can be further distinguished into<ul> <li>2nd level type A: There is a space on the other side.</li> <li>2nd level type B: There is a building element on the other side.</li> </ul> </li> </ul> <p>The exact definition of how space boundaries are broken down depends on the view definition, more detailed conventions on how space boundaries are decomposed can only be given at the domain or application type level.</p> <p>In an architectural or FM related view, a space boundary is defined totally from inside the space. This is a 1st level space boundary.</p> <p>In a thermal view, the decomposition of the space boundary depends on the material of the providing building element and the adjacent spaces behind. This is a 2nd level space boundary.</p>"},{"location":"data-model/spaces-zones-and-spatialzones/#zones","title":"Zones","text":"<p>As documented in The official 4.3.2.0 documentation for \"IFC 4.3\".</p> <p>A zone is a group of spaces, partial spaces or other zones. These spaces may or may not be adjacent. A zone does not have its own shape representation.</p> <p>Zone structures may not be hierarchical, i.e. one individual IfcSpace may be associated with zero, one, or several IfcZone's. IfcSpace's are grouped into an IfcZone by using the objectified relationship IfcRelAssignsToGroup. For example, a zone might be used to represent an apartment as a group of spaces. Although the concept of Spatial Zone appears to to have more capabilities to support adminitrative processes, the IfcZone is also often considered in administrative processes as in BIM/IFC-based 3D spatial model for condominium ownership: A case study of China</p>"},{"location":"data-model/spaces-zones-and-spatialzones/#spatial-zones","title":"Spatial Zones","text":"<p>The Spatial Zone is a relatively recent addition to IFC.</p> <p>As documented in The official 4.3.2.0 documentation for \"IFC 4.3\". a spatial zone is a non-hierarchical and potentially overlapping decomposition of the project under some functional consideration.</p> <p>A spatial zone might have its independent placement and shape representation.</p> <p>A spatial zone might be used to represent</p> <ul> <li>a thermal zone</li> <li>a construction zone</li> <li>a lighting zone</li> <li>a security zone</li> <li>a usable area zone.</li> </ul> <p>Hence functional perspective(s) also accounted for in the defined PropertySets listed hereunder and documented in The official 4.3.2.0 documentation for \"IFC 4.3\".</p> <ul> <li>Pset_AirSideSystemInformation</li> <li>Pset_Risk</li> <li>Pset_SpaceAirHandlingDimensioning</li> <li>Pset_SpaceCommon</li> <li>Pset_SpaceCoveringRequirements</li> <li>Pset_SpaceFireSafetyRequirements</li> <li>Pset_SpaceHVACDesign</li> <li>Pset_SpaceLightingDesign</li> <li>Pset_SpaceOccupancyRequirements</li> <li>Pset_SpaceThermalLoad</li> <li>Pset_SpaceThermalLoadPHistory</li> <li>Pset_SpaceThermalPHistory</li> <li>Pset_SpatialZoneCommon</li> <li>Pset_ThermalLoad</li> <li>Pset_Tolerance</li> <li>Pset_Uncertainty</li> <li>Qto_BodyGeometryValidation</li> <li>Qto_SpatialZoneBaseQuantities</li> </ul>"},{"location":"data-model/spaces-zones-and-spatialzones/#link-to-spatial-units","title":"Link to Spatial Units","text":"<p>The Spatial Zone has AEC Uses Cases as illustrated in IFC Spatial Zone Requirements and Implementation.</p> <p>But it also appears to be a perfect candidate to provide the bridge between IFC and the Spatial Unit of LADM and related administrative domains of registering Rights, Responsibilities and Restrictions related to building or infrastructures. A number of examples are provided in BIM-Enabled 3D Digital Urban Land Administration</p> <p>Typically, the IfcSpatialZone will will be anchored to a root element (projet, site, building, storey, or infrastructure) with an ifcRelAggregates relationship, and collect all relevant items present in the IFC via one or more  IfcRelReferencedInSpatialStruture relationships.</p>"},{"location":"data-model/spaces-zones-and-spatialzones/#adding-spatial-zones-to-the-ifcs","title":"Adding Spatial Zones to the IFC's","text":"<p>The Spatial Zones (IfcSpatialZone) are a recent addition to the IFC specification. There are therefore not present in most IFC files.</p> <p>We propose to follow the specification of IFC 4 and relate the IfcSpatialZone to the other elements via the IfcRelReferencedInSpatialStructure relationship.</p> <p>As an example, we start by relating the IfcSpatialZone with the spaces. In this way, the IfcSpatialZone relates to composing IfcSpaces which in turn embark standard products such as IfcWall, IfcSlab, IfcDoor, IfcWindow, ... via the IfcRelSpaceBoundary relationship.</p> <pre><code>erDiagram\n    space\n    spatialZone [\"spatialZone (spatialUnit) : common part, parking, private apartment, office, shop, ...\"]\n    container [\"building or storey\"]\n    object[\"wall, slab, door, window,...\"]\n    propertySet [\"functional propertySets\"]\n    container ||--o{ spatialZone : \"aggregates (IfcRelAggregates)\"\n    container ||--o{ space : \"aggregates (IfcRelAggregates)\"\n    spatialZone ||--|{ space : \"referenced in spatial structure (IfcRelReferencedInSpatialStructure)\"\n    container ||--|{ object : \"contained in spatial structure (IfcRelContainedInSpatialStructure)\"\n    space }|--|{ object : \"bounded by (IfcRelSpaceBoundary)\"\n    propertySet }|--|{ object : \"applies to\"\n    propertySet }|--|{ space : \"applies to\"\n    propertySet }|--|{ spatialZone : \"applies to\"\n</code></pre> <p>This is one 'recipe' for a Spatial Zone. There may be many others 'recipes' depending on the needs: collect all technical data in a Spatial Zone that shadows the Spatial Unit linked to a BAUnit (Basic Administrative Unit) and provide all the tehnical data that is needed for the administrative process at hand.</p> <p>All these technical data can be conveyed by ad hoc propertySets. So that they will be available for display when selecting the corresponding element in an IFC Viewer.</p>"},{"location":"data-model/spaces-zones-and-spatialzones/#ifcspatialzone-for-private-parts-and-common-parts","title":"IfcSpatialZone for Private Part(s) and Common Part(s)","text":"<p>Within buildings with appartments or mixed occupancy types, there is typically two types of Spatial Zones:</p> <ul> <li>Private parts: mostly on a storey, but possibly spanning storeys</li> <li>Common parts: mostly distributed across storeys</li> </ul> <p>A SpatialZone for Private part(s) will</p> <ul> <li>relate to one Storey via an IfcRelAggregates relationship: by convention, the storey is that of the main entrance</li> <li>relate to all other storeys they are spanning  via an IfcRelReferencedInSpatialStructure</li> </ul> <p>A SpatialZone for Common parts will</p> <ul> <li>relate to the Building via an IfcRelAggregates relationship</li> <li>related to all other storeys via an IfcRelReferencedInSpatialStructure</li> </ul>"},{"location":"data-model/spaces-zones-and-spatialzones/#books","title":"Books","text":"<p>BIM-Enabled 3D Digital Urban Land Administration -- New Era in Managing Cities in Rajabifard, A., et al. BIM and Urban Land Administration. 1st ed., CRC Press, 2019.</p> <p>Liu, C., Zhu, H., Li, L., Ma, J., &amp; Li, F. (2023). BIM/IFC-based 3D spatial model for condominium ownership: A case study of China. Geo-Spatial Information Science, 27(5), 1638\u20131656.</p>"},{"location":"data-model/spatial-units/","title":"Spatial Units, Building Logbook and Technical Data","text":"<p>Hereunder a simplified model showing the high level relationship between the Land Admnistration (LA) concepts and the AEC technical data.</p> <pre><code>erDiagram\n    LA_Party\n    LA_BAUnit\n    LA_RRR\n    LA_SpatialUnit {\n        externalIDType id PK\n    }\n    spatialUnit_JunctionWith_LA_spatialUnit {\n        uuid id\n        uuid spatialUnitId\n        string external_id UK\n    }\n    spatialUnit {\n        uuid id PK\n    }\n    dataBundle [\"dataBundle: technical Data (e.g. IFC's)\"] {\n        uuid id PK\n    } \n\n    spatialUnitBundleUnit {\n        uuid id PK\n        uuid spatialUnitId FK\n        uuid bundleId FK\n        uuid bundleUnitId FK\n    }\n\n    bundleUnit {\n        uuid5   bundleunit_id PK  \"The Id as a hash of all columns except unitJson\"\n        int     bundle_id \"The Id of the bundle\"\n        uuid    unit_id \"The Id if the Object \"\n        string  unitType \"The type of the Object (e.g. IfcSpatiaZone)\"\n        string  unitName \"The name of the object (e.g. Apartment 01-09)\"\n        string  relationship_type \"The type of the relationship (e.g. 'IfcRelAggregates)\"\n        uuid    parent_id \"The Id of the Parent\"\n        string  parent_type \"The type of the parent (e.g. 'IfcBuildingStorey')\"\n        json    unitJson \"Information that is specific to the type\"\n    }\n\n    LA_Party }|--|{ LA_RRR : \"\"\n    LA_RRR }|--|| LA_BAUnit : \"\"\n    LA_BAUnit }|--|{ LA_SpatialUnit : \"\"\n    DBL_Digital_Building_LogBook ||..|{ LA_SpatialUnit : \"\"\n    spatialUnit_JunctionWith_LA_spatialUnit }|--|| LA_SpatialUnit : \"\"\n    spatialUnit_JunctionWith_LA_spatialUnit }|--|| spatialUnit : \"\"\n    spatialUnit ||--|{ spatialUnitBundleUnit: \"\"\n    bundleUnit  ||--|{ spatialUnitBundleUnit: \"\" \n    dataBundle ||--|{ bundleUnit: \"\"\n</code></pre> <p>LA_Party, LA_RRR, LA_BAUnit, LA_SpatialUnit and DBL_Digital_Building_LogBook are placeholders for external concepts that are highly relevant for the Use Cases supported / enabled by the D4SU platform but are not included in the scope of the  D4SU platform and supporting database.</p> <p>LA_Party, LA_RRR, LA_BAUnit, LA_SpatialUnit are part of the Land Administration Domain Model (LADM) ISO 19152-1:2024.</p> <p>The initial focus of LADM is the Cadastral Registration of LAND (with a large and diverse meaning of any 'spatial extent that is defined by RRRs [via baunit] and encompass the surface of the earth, strata, sub-strata or the marine environment'). But as noted in the introduction to D4SU, the concept can be applied to BAUnit that are not related to the Cadastral Registration such as e.g., Energy Effiency of Buidlings or Housing Regulation.</p> <p>According to its Definition, the Digital Building Logbook (DBL) is a common repository for all relevant building data. It facilitates transparency, trust, informed decision making and information sharing within the construction sector, among building owners and occupants, financial institutions and public authorities. The Technical guidelines for digital building logbooks has favored options where:</p> <ul> <li>The information is \u201cpulled\u201d by the DBL from the data source</li> <li>Storage in the DBL would rely on CKAN. The Comprehensive Knowledge Archive Network (CKAN) is an open-source open data portal for the storage and distribution of open data.</li> </ul> <p>The Figure 32: Properties for buildings extracted from the Technical guidelines for digital building logbooks report and shown hereinunder makes clear the the DBL will benefit from readily available and accessible information from technical information such as provided by BIM/IFC or other source that would be supported by the D4SU.</p> <p></p> <p>The purpose of the D4SU platform is to enable the provision of an API to provide data based responses to request for information (technical data) from an administrative process (possibly supported/faciliated by the DBL).</p> <p>Typically, SpatialUnits will include:</p> <ul> <li>The land on which the building is built (Cadastral Ground Parcel)</li> <li>The Building itself (Whole Building)</li> <li>The Commmon Parts (or Shared Unit)</li> <li>The Private Parts (Private Building Unit) whether used for Housing, Commercial,  Office, Industrial or Parking purpose</li> </ul> <p>The following Table extracted from the paper Evaluation of the International 3D Geospatial Data Models and IFC Standard for Implementing an LADM-based 3D Digital Cadastre provide some suggestions on the level of the link between the LADM Spatial Unit and concepts from other source (CityGML, IFC, IndoorGML, InfraGML).</p> <p>What we refer to as a SpatialUnit is actually any entry of the first column (hence: SpatialUnit, SpatialUnitGroup, Level (Storey), ...).</p> <p></p> <p>The paper Mapping private, common, and exclusive common spaces in buildings from BIM/IFC to LADM. A case study from Saudi Arabia brings an in depth view of the relationships between the technical data of the IFC model and the Spatial Units of LADM for a variety of cases. We show hereunder two views, one for apartments and one for common parts that illustrates capabilities that will need to be supported by the d4SU platform.</p> <p>View of Spaces corresponding to apartements</p> <p></p> <p>View of Spaces corresponding to Common parts</p> <p></p> <p>On the above figures, Spatial Units are limited to the representations (3D Spaces), whereas, more may be needed and adding all relevant construction and distribution elements will be proposed instead.</p>"},{"location":"features/add-properties-to-spatialZone/","title":"Add Properties to a SpatialZone","text":"Feature Group: CRUD <p>TO DO</p>"},{"location":"features/conversion-from-cityjson-to-ifc/","title":"Conversion from CityJson to IFC","text":"Feature Group: Convert <p>  The capability exists (with issues) but the use case should be clarified/investigated. Not for production in the current state </p>"},{"location":"features/conversion-from-cityjson-to-ifc/#intro","title":"Intro","text":"<p>Under the umbrella of IfcOpenShell, there is also the conversion from CityJSON to IFC. IFCCityJSON one way from CityJSON to IFC.</p> <p>Documentation is available on IfcOpenShell Documentation / IfcCityJSON.</p> <p>There is an example file with two schematic buildings in Getting started with CityJSON. The file is twobuildings.city.json</p>"},{"location":"features/conversion-from-cityjson-to-ifc/#installation","title":"Installation","text":"<p>Installation steps from the ifccityjson doc</p> <ol> <li>cd /path/to/IfcOpenShell/src/ifccityjson</li> <li>pip install</li> </ol>"},{"location":"features/conversion-from-cityjson-to-ifc/#examples","title":"Examples","text":""},{"location":"features/conversion-from-cityjson-to-ifc/#conversion-of-twobuildingscityjson","title":"Conversion of twobuildings.city.json","text":"<p>The conversion of that file works seamlessly</p> <p></p> <p>Issue</p> <p>The conversion of twobuildings.city.json produces an ifc file but ThatOpen can't open it and BIMcollab display has issues. Only OpenIFCViewer can handle it.</p> <p>Issue</p> <p>The conversion to IFC of the file generated by the conversion from IFC to CityJSON for Duplex_A_20110907_optimized stumble on errors.</p>"},{"location":"features/convert-ifc-to-other-formats/","title":"Convert IFC to other formats with IfcConvert","text":"Feature Group: Convert"},{"location":"features/convert-ifc-to-other-formats/#introduction","title":"Introduction","text":"<p>Different conversions are available with IfcConvert (part of IfcOpenShell) and detailed in IfcConvert - Usage</p> <p>This includes:</p> <ul> <li>Collada (.dae). 3D models of buildings, bridges, monuments can be imported in KML (Key Markup Language) with the COLLADA interchange file format. This means the model can be displayed on Google Earth or Cesium.</li> <li>glTF (.glb). Same as above with a new format. Supported in Cesium.</li> <li>CityJson. A recent addition to the IfcConvert stack. The CityJSON model can be imported in Geo products designed to manage and render CityGML models. E.g. 3DCityDB which also can import Collada and glTF files.</li> </ul>"},{"location":"features/convert-ifc-to-other-formats/#caveats","title":"Caveats","text":"<p>IfcConvert is not a library but an executable that needs to be run from a Celery task in a subprocess.</p> <p>Because multiple types of issues can occur, a timeout is configured on the subprocess to avoid that the Celery worker gets stuck.</p> <p>The timeout if defined in the request with a default of 60 sec and has configured lower and uper bounds.</p> <pre><code>class IfcConvertInstruction(BaseModel):\n    sourceFileURL: str | None = \"http://localhost:8002/IFC_SOURCE_FILES/Duplex_A_20110907_optimized.ifc\"\n    targetFormat: Literal['glTF','COLLADA','CityJSON']\n    timeout: Optional[int] = Field(60, ge=30, le=180)\n</code></pre>"},{"location":"features/convert-ifc-to-other-formats/#examples","title":"Examples","text":""},{"location":"features/convert-ifc-to-other-formats/#conversion-of-duplex_a_20110907_optimizedifc-to-collada","title":"Conversion of Duplex_A_20110907_optimized.ifc to Collada","text":"<p>With Online 3D Viewer</p> <p></p>"},{"location":"features/convert-ifc-to-other-formats/#conversion-of-duplex_a_20110907_optimizedifc-to-gltf","title":"Conversion of Duplex_A_20110907_optimized.ifc to glTF","text":"<p>Same viewer</p> <p></p>"},{"location":"features/convert-ifc-to-other-formats/#conversion-to-cityjson","title":"Conversion to CityJSON","text":"<p>This originates from the paper Automatic conversion of IFC datasets to geometrically and semantically correct CityGML LOD3 buildings  (../features/references.md#ifc-to-citygml).</p> <p>The code was originally published on https://github.com/tudelft3d/ifc2citygml, thenafter on https://github.com/tudelft3d/esri_geobim, then enventually made available under the umbrella of IfcOpenShell on https://github.com/IfcOpenShell/ifc-to-cityjson.</p> <p>The functionality has been integrated into IfcConvert. Downloads are available at IfcConvert Download</p> <p>The CityJSON version outputted is 1.0 and is outdated. It is possible to upgrade the version to 2.0 with the cityjson toolkit cjio There is also an online CityJSON Validator.</p>"},{"location":"features/convert-ifc-to-other-formats/#conversion-of-duplex_a_20110907_optimizedifc-to-cityjson","title":"Conversion of Duplex_A_20110907_optimized.ifc to CityJSON","text":"<p>With ninja viewer of which the code is available on github</p> <p></p>"},{"location":"features/convert-ifc-to-other-formats/#issue-conversion-of-ifc_schependomlaan-from-ifc-to-cityjson-failed","title":"Issue: Conversion of IFC_Schependomlaan from IFC to CityJSON failed","text":"<pre><code>Last login: Thu Oct 24 22:21:23 on ttys042\nIfcOpenShell IfcConvert 0.7.11-03935a91d (OCC 7.5.3)\nScanning file...\nDone scanning file   \nCGAL error: assertion violation!\nExpression : \nFile       : /Users/hetzner/IfcOpenShell_v0.8.0/build/Darwin/arm64/10.9/install/cgal-5.3/include/CGAL/Nef_3/SNC_const_decorator.h\nLine       : 276\nExplanation: it is not possible to decide which one is a visible facet (if any)\nRefer to the bug-reporting instructions at https://www.cgal.org/bug_report.html\n</code></pre> <p>The conversion completes reasonably fast on relatively simple models. This entice to do a strong filtering/simplification before attempting the conversion.</p>"},{"location":"features/create-floor-plans/","title":"Create Floor Plans","text":"Feature Group: Host <p>TO DO</p>"},{"location":"features/create-spatial-unit-spatialZone/","title":"Create SpatialZones - Apartments or Common Parts","text":"Feature Group: CRUD <p>This is provided by Read and Write access to the Data Base</p>"},{"location":"features/create-spatial-unit-spatialZone/#create-the-spatialzone","title":"Create the SpatialZone","text":"<p>Before we can extract a SpatialZone, we need to have one. We could expect that this is readily available. It would be fine indeed. But even if that would be the case, say for the Building Permit or for the Cadaster Registration, there would be cases where the SpatialZone should be created on an ad hoc basis to respond to specific needs.</p> <p>As suggested in Data Model Spaces, Zones and SpatialZones a SpatialZone can be viewed as a non hierarchichal collection of Spaces related by the IfcRelReferencedInSpatialStructure relationship.</p>"},{"location":"features/create-spatial-unit-spatialZone/#create-spatialzones-for-ifc-schependomlaan","title":"Create SpatialZones for IFC Schependomlaan","text":"<p>Schependomlaan has 10 apartments and some common parts. Each apartment is located on a single floor (IfcBuildingStorey). We can create an Apartment as a SpatialZone (or alternatively as a Zone or Group) by identifying all spaces that are part of this apartment.</p> <p>The spaces for the ground floor are shown hereunder on an annotated screen capture. There is apparently an issue to get a standard display of IFC Schependomlaan spaces.</p> <p></p> <p>The naming of the space makes it simple to associate the apartment to the space on the basis of the first digit of the space name. E.g, for the Ground Floor (Begane Grond)</p> <ul> <li>Apartment 00.01 for the spaces in the series 1.00 to 1.07</li> <li>Apartment 00.02 for the spaces in the series 2.00 to 2.10</li> <li>Apartment 00.03 for the spaces in the series 3.00 to 3.09</li> </ul> <p>We process in steps:</p>"},{"location":"features/create-spatial-unit-spatialZone/#step-1-selection-of-all-spaces-and-csv-export","title":"Step 1: Selection of all spaces and csv export","text":"<pre><code>class ExportSpacesFromBundleInstruction(BaseModel):\n    bundleId: str | None = \"1\"\n</code></pre> <p>The request provides the id (integer) of the bundle and a selection of space-related data is made and provided in a csv and a json. We assume hereunder that the csv is the prefered way to work we the data.</p> <p>The spaces are made available in a csv List of Spaces in IFC Schependomlaan</p>"},{"location":"features/create-spatial-unit-spatialZone/#step-2-a-user-fills-the-csv-with-the-data-for-the-spatial-zones","title":"Step 2: A user fills the csv with the data for the Spatial Zones","text":"<p>The correspondance with the SpatialZones is filled by a user in the csv List of Spaces in IFC Schependomlaan with their corresponding SpatialZones</p> <p>SpatialZones have a type that determines if their are linked to the site, the building or the storey. This is configurable.</p> <p>Hereunder an example:</p> SpatialZone Type Linked to Private Parts - Apartment Storey Private Parts - Multistorey Apartment Building Common Parts Building Internal Parking Building External Parking Site <p>In our use case we have two types of SpatialZones:</p> <ul> <li>Private Parts - Apartment; are linked to their storey with an IfcRelAggregates relationship and with their spaces with an IfcRelReferencedInSpatialStructure relationship</li> <li>Common Parts; are linked to the building with an IfcRelAggregates and with their spaces with an IfcRelReferencedInSpatialStructure relationship</li> </ul>"},{"location":"features/create-spatial-unit-spatialZone/#step-3-the-csv-with-the-spatialzones-is-submitted-via-a-request","title":"Step 3: The csv with the SpatialZones is submitted via a request","text":"<pre><code>class CreateSpatialZonesInBundleInstruction(BaseModel):\n    bundleId: str | None = \"1\"\n    spatialZoneGivenType: Literal['IfcSpatialZone','IfcZone','IfcGroup'] | None = 'IfcSpatialZone'\n    hasRepresentation: bool | None = False\n    csvFileURL: str | None = \"http://localhost:8002/TEMP_FILES/CSV/IFC_Schependomlaan_spaces_with_spatialzones.csv\"\n    @model_validator(mode='before')\n    def has_representationage_only_for_spatialzone(cls, values):\n        given_type = values.get(\"spatialZoneGivenType\")\n        has_representation = values.get(\"hasRepresentation\")\n        if given_type != 'IfcSpatialZone' and has_representation:\n            raise ValueError(\"hasRepresentation is only for IfcSpatialZone\")\n        return values\n</code></pre> <p>This triggers the creation of the Spatial Zones and of their association with the Spaces</p> <p>The creation of the corresponding IfcSpatialZones and of their link to the IfcBuildingStorey or the IfcBuilding can be done directly in the database:</p> <ul> <li>insert into object the IfcSpatialZones</li> <li>insert into relationship with type IfcRelAggregates the list of related IfcSpatialZone with the relating IfcBuildinStorey or IfcBuilding</li> <li>insert into relatedmembership one row for each related IfcSpatialZones in the IfcRelAggregates relationship</li> </ul> <p>Then, for each SpatialZone, we can create the link between the related IfcSpace and the IfcSpatialZone of the apartment.</p> <ul> <li>insert into relationship with type IfcRelReferencedInSpatialStructure the list of related IfcSpaces with the relating IfcSpatialZone</li> <li>insert into relatedmembership one row for each related IfcSpace in the IfcRelReferencedInSpatialStructure relationship</li> </ul> <p>We then have created the IfcSpatialZone with the scheme</p> <pre><code>erDiagram\n    space\n    spatialZone [\"spatialZone (spatialUnit) : Private Parts - Apartment or Common Parts\"]\n    container [\"Building or Storey\"]\n    object[\"wall, slab, door, window,...\"]\n    container ||--o{ spatialZone : \"IfcRelAggregates\"\n    container ||--o{ space : \"IfcRelAggregates\"\n    spatialZone ||--|{ space : \"IfcRelReferencedInSpatialStructure\"\n    container ||..|{ object : \"no IfcRelContainedInSpatialStructure\"\n    space }|--|{ object : \"IfcRelSpaceBoundary\"\n</code></pre>"},{"location":"features/create-spatial-unit-spatialZone/#create-spatialzones-for-duplex_a_20110907_optimized","title":"Create SpatialZones for Duplex_A_20110907_optimized","text":"<p>This example has two duplex apartments.</p>"},{"location":"features/create-spatial-unit-spatialZone/#view-of-duplex_a_20110907_optimizedifc-with-solibri-anywhere","title":"View of Duplex_A_20110907_optimized.ifc with Solibri Anywhere","text":"<p>The first duplex has spaces A1xx on the first floor and A2xx on the second floor. The second duplex has spaces B1xx on the first floor and B2xx on the second floor.</p> <p>The process to create the SpatialZones is the same as for IFC Schependomlaan here above.</p> <p>We have two types of SpatialZones:</p> <ul> <li>Private Parts - Multistoreys Apartment; are linked to the building with an IfcRelAggregates relationship and with their spaces with an IfcRelReferencedInSpatialStructure relationship</li> <li>Common Parts; are linked to the building with an IfcRelAggregates and with their spaces with an IfcRelReferencedInSpatialStructure relationship</li> </ul>"},{"location":"features/create-spatial-unit-spatialZone/#display-of-spatialzones","title":"Display of SpatialZones","text":"<p>SpatialZones are relatively new and are not supported seamlessly by all Ifc Viewers. Rendition is problematic with OpenIFCViewer, That Open (Web) and BIMCollab Zoom. Only Solibri Anywhere can handle IfcSpatialZones at a basic level. For convenience, the CreateSpatialZonesInBundleInstruction allows for use of IfcZone or IfcGroup to represent an IfcSpatialZone.</p> <p>That Open (Web) could be updated to handle IfcSpatialZone and this would be possible since the code (Typescript) is in Open Source and readily available.</p> <p>Hereunder, we display the structure shown by Solibri Anywhere.</p> <p></p> <p>At the Building level, we have linked a SpatialZone that federates all Spaces that are not in one of the 10 apartments. The SpatialZone is visible at the right level on the MODEL TREE but the INFO/Relations view displays limited information.</p> <p>When going to one of the Spaces in the SpatialZone, we don't see any reference to the SpatialZone in the  INFO/Relations view.</p> <p></p>"},{"location":"features/create-spatial-unit-spatialZone/#spatialzone-representation","title":"SpatialZone Representation","text":"<p>TO DO</p> <p>An IfcSpatialZone can have a representation.</p> <p>Logically, it could be the Union of the volumes of the federated IfcSpaces. This requires some geometry operations that are not yet done.</p>"},{"location":"features/create-spatial-unit-spatialZone/#complement-the-bundleunit-data","title":"Complement the bundleUnit data","text":"<pre><code>flowchart TB\n    bundle\n    bundleJournal\n    bundleUnit[\"bundleUnit: root\"]\n    spatialUnitBundle\n    spatialUnit[\"spatialUnit: root\"]\n    spatialUnitUnderRoot[[\"Not Yet Paired&lt;br/&gt;spatialUnits: Site(s),&lt;br/&gt;Building(s),&lt;br/&gt;Storey(s),&lt;br/&gt;Apartment(s),&lt;br/&gt;Common(s)\"]]\n    spatialUnit --o spatialUnitUnderRoot\n    spatialUnitBundle --o bundleUnit\n    spatialUnitBundle --o spatialUnit\n    bundle --o bundleUnit\n    bundle --o bundleJournal\n    bundleUnit --o bundleUnitSite[\"bundleUnit: site\"]\n    bundleUnitSite --o bundleUnitBuilding[\"bundleUnit: building\"]\n    bundleUnitBuilding --o bundleUnitStorey[\"bundleUnit: storey\"]\n    bundleUnitBuilding --o bundleUnitSpUnitCommon[\"bundleUnit: SpatialZone - Common Parts\"]\n    bundleUnitSpUnitCommon -- referenced --o bundleUnitSpaceCommon[\"bundleUnit: common spaces: stairs, lift, ...\"] \n    bundleUnitStorey[\"bundleUnit: storey\"] --o bundleUnitSpaceCommon\n    bundleUnitStorey --o bundleUnitSpacePrivate[\"bundleUnit: apartment space: living room, kitchen, ...\"] \n    bundleUnitStorey --o bundleUnitSpUnitPrApartment[\"bundleUnit: SpatialZone - Private Parts | Apartment\"]\n    bundleUnitSpUnitPrApartment -- referenced --o  bundleUnitSpacePrivate</code></pre>"},{"location":"features/create-spatial-unit-spatialZone/#lists","title":"Lists","text":""},{"location":"features/create-spatial-unit-spatialZone/#list-of-spaces-in-ifc-schependomlaan","title":"List of Spaces in IFC Schependomlaan","text":"space_id space_name space_longname spatialzone_name spatialzone_longname spatialzone_type storey_id storey_name building_id building_name d4141660-7677-49d8-9cc1-d96d80b0618a 1.00 entree nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 0e44feae-35d6-452c-ae59-fd5d4479e2ae 1.01 mk nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 4e60658c-4a93-4fe1-b642-7aaabfeb8fe9 1.02 toilet nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 255e8da7-f833-4cd6-b9fc-51b4df1ee11e 1.02 toilet nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building db806df3-e245-4a16-9858-358843d58be5 1.03 woonkamer nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 5c1788cb-3b4f-491f-942f-512f732223eb 1.04 keuken nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building f0028917-8d2b-4483-8d15-286079cfe653 1.05 slaapkamer nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 13badbc8-ddd4-4574-b2e6-634d636ed980 1.06 badkamer nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 1912449b-86a3-4985-99fb-4f29e1670d92 1.07 instal. ruimte nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 0db465ff-68ab-4c90-8fe7-992e36945730 2.00 entree nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 191513ed-452b-4ada-8e63-a0f0404e48dc 2.01 mk nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building f99fd6d6-2a05-4618-b1a8-e85ff6b58b7f 2.03 woonkamer nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building b5cf30ec-8cf7-4c7f-a40e-387ec9d2c688 2.04 keuken nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 502e4848-6b60-4981-9ea6-9d2b741985f1 2.05 gang nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 24b55506-3614-4a92-85ae-1c0111b16da1 2.06 slaapkamer 1 nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 18d30475-d715-4123-acdf-9df8a43863b4 2.07 slaapkamer 2 nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building a5d652ca-fb20-48a6-9ee3-0584d428e867 2.08 badkamer nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 025d4fcd-3a77-4deb-8ab8-4bd0007b4dce 2.09 instal. ruimte nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 42291957-3edd-443d-b4e2-bcf0751f358b 2.10 berging nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 50103ef1-cd0a-486e-8288-7bb08ac11022 3.00 entree nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 24dbce38-25d0-4a91-96c7-2b05cd541fa6 3.01 mk nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 12626d0f-e41e-4c83-a4fd-16605fc725e8 3.02 toilet nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 763100a6-79f9-4425-9ed3-90b2ce20153a 3.03 woonkamer nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 40fd27f7-2aaf-43ab-9915-04a305acf1b0 3.04 keuken nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building f20e64e4-6691-4145-9449-31e4f1a6c020 3.05 gang nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building c95dadc7-fc39-415b-bc49-1dea3691536c 3.06 slaapkamer 1 nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building af73d12f-8a23-40f1-98e9-8c0b1af687ed 3.07 slaapkamer 2 nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 90854a93-f12a-4aaf-b66c-c5b443ef0017 3.08 badkamer nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 74460c8d-da97-44a5-a333-37d98a05b8ed 3.09 instal. ruimte nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building a73ec9a0-46af-4151-9975-177460f56999 A0.00 entree nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 82bd3e52-fb5f-4503-8c39-7acf7df0e6ac A0.01 instal. ruimte nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building e35ae068-0478-4e71-9ff9-6d8a19b0323e A0.02 berging nan nan nan 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 9e3d3b91-5048-4cee-ad1f-d5debb8ba287 4.00 entree nan nan nan 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 37e49b23-eb08-436a-b63a-8aad6e9fcbe6 4.01 mk nan nan nan 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 183cd8e0-ab9d-4c97-9782-2b9c3350d50a 4.02 toilet nan nan nan 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 8b6e1299-d614-4fc9-b258-55db74423903 4.03 woonkamer nan nan nan 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building a87bae1f-19a0-4441-b47f-ae791d844acb 4.04 keuken nan nan nan 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 5b656d6c-e2c1-42bc-bd6c-71290ca1e30c 4.05 slaapkamer 1 nan nan nan 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building cf0cc63a-367b-4555-b7e5-83d432d4f987 4.06 slaapkamer 2 nan nan nan 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building e87e6759-644f-4567-992e-382877efb4f3 4.07 badkamer nan nan nan 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 09a7206d-82da-4fdd-a5a5-b35b018df683 4.08 instal. ruimte nan nan nan 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 4adf5603-1d57-48b1-aa81-6cd7caa3230a 5.00 entree nan nan nan 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 2b802645-17ec-4599-86c9-76b5ea603a06 5.01 mk nan nan nan 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 8e84831a-e727-437d-89ea-9a533aaec9fe 5.02 toilet nan nan nan 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 0bdb446f-bc26-45e6-b4d8-29138de8aeac 5.03 woonkamer nan nan nan 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 592f4e55-c5b3-4d78-a767-bfebf95e25ab 5.04 keuken nan nan nan 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 38cc76ca-efaa-4ad3-9cbc-30e06e37bcfc 5.05 slaapkamer 1 nan nan nan 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 124a033e-593b-4076-8a8d-7dfa39d131e4 5.06 slaapkamer 2 nan nan nan 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 676b06eb-d7ec-4ec2-8908-92cd912ae31a 5.07 badkamer nan nan nan 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 5444e211-c46e-4a66-8150-e898f5e25e2b 5.08 instal. ruimte nan nan nan 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building b6c83c65-9a50-434a-a262-9c7a9866c47f 5.09 kast nan nan nan 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building a0a6f337-1087-42f1-a96d-34a376b6e0e1 6.00 entree nan nan nan 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 65ce765b-21bb-4deb-8ea0-16c879183e27 6.01 mk nan nan nan 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 0982d75a-7284-41c4-8bb2-76b58d57e491 6.02 toilet nan nan nan 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 2ea86100-b35f-4716-bf36-612c296853e9 6.03 woonkamer nan nan nan 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building fea074b1-aa73-4bb5-845f-cccdbe74394c 6.04 keuken nan nan nan 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building dc65dfce-2c8d-4090-bedf-2f67f147815e 6.05 slaapkamer 1 nan nan nan 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 3d07bc83-50d8-48f1-a5c5-2635f880ecbd 6.06 slaapkamer 2 nan nan nan 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building ce99ad82-39ba-4a10-914f-136da87bee84 6.07 badkamer nan nan nan 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 9061057e-3b37-492d-856c-08647fc48881 6.08 instal. ruimte nan nan nan 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 2f9d5b90-373e-45e9-b741-6bf6837c2581 A1.01 overloop nan nan nan 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 30186c45-2d2c-4c1a-92fd-3e520e83af0e 7.00 entree nan nan nan 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building ad23ea9f-8339-4a33-b61f-c1736c1a540e 7.01 mk nan nan nan 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 3c56aaec-921d-44cc-b18b-1224592d8bdd 7.02 toilet nan nan nan 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 76de29eb-c020-4e79-a5bd-0ed7c6827466 7.03 woonkamer nan nan nan 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building ffe7b54f-3cc7-4cb6-b4b5-2914fa1cbed8 7.04 keuken nan nan nan 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 6aa148cc-4ca4-4a7d-aee1-52e8ae349c5f 7.05 slaapkamer 1 nan nan nan 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building eac234ed-6973-491b-a164-18ea3ff4292b 7.06 slaapkamer 2 nan nan nan 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 70f54dd5-bcf2-4b00-8084-abdbae4a0bfd 7.07 badkamer nan nan nan 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building d4a13317-f4fe-4299-9b78-f3409494607d 7.08 instal. ruimte nan nan nan 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 0ce2d3f6-1e1e-4b44-a314-6cd794d775bf 8.00 entree nan nan nan 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 754368d8-fa84-46ac-be69-0d991d675d67 8.01 mk nan nan nan 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building b79145c3-70f1-4ad2-bc93-a8b38d62c555 8.02 toilet nan nan nan 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 24fae3c4-60b6-4241-9ec5-aeae522dc868 8.03 woonkamer nan nan nan 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building da526ff3-fd78-4ee5-b5d0-0f39ef2ad002 8.04 keuken nan nan nan 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building b4fae5c3-578a-47eb-a65f-9a189ab4bedb 8.05 slaapkamer 1 nan nan nan 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 55a2c35c-cc9a-4a1a-b1bf-94e8b701f711 8.06 slaapkamer 2 nan nan nan 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 0c4cda91-5635-4c83-81cd-97861e2007d7 8.07 badkamer nan nan nan 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 76228b65-0e94-41e8-afd0-1a7896150a8c 8.08 instal. ruimte nan nan nan 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 363a28d9-7e78-4a8c-a932-d758fa09553c 8.09 kast nan nan nan 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 97c45622-5687-493c-b995-766888ca8a9c A2.01 overloop nan nan nan 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 26255731-3eab-4760-befa-6dd126309bd4 10.00 entree nan nan nan 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building a2cbf3b3-67ff-429d-8306-f578c314b4f4 10.01 mk nan nan nan 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 99979f8b-4e97-483b-905c-b454eb11daac 10.02 toilet nan nan nan 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 2f423a09-aed5-4541-a5db-5c2538242ef5 10.03 woonkamer nan nan nan 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 37afb7b7-8853-43c5-a36f-5c397ea907d4 10.04 keuken nan nan nan 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 53d5628c-940e-4e24-9a47-252094299e17 10.05 slaapkamer nan nan nan 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 42d94669-d1ee-4d3f-9fe1-13a21e8915d4 10.06 onben. ruimte nan nan nan 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 4abd018d-c095-41ac-8544-f112772c83d8 10.07 badkamer nan nan nan 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 0f615aab-4637-4b61-9348-50f1996f5ec0 10.08 instal. ruimte nan nan nan 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 0085ff3d-8503-4d69-9d91-6685fa317c23 9.00 entree nan nan nan 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 323a5b95-1e23-4d20-a8b0-1a88b329d10b 9.01 mk nan nan nan 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 9c3aabce-8c60-48b1-891f-8bfb59b6f075 9.02 toilet nan nan nan 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 60def17e-9b13-4dac-a4aa-999cd8ee076f 9.03 woonkamer nan nan nan 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building ec404de5-8532-4005-bba3-018f31512955 9.04 keuken nan nan nan 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building fea59720-007f-4797-8a51-be60dcd9ea8f 9.05 slaapkamer 1 nan nan nan 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 6edb9947-be66-4bdc-9d70-324718d12ce7 9.06 slaapkamer 2 nan nan nan 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building c44d52f7-bd98-4e92-84ee-3c7cf3e1e009 9.07 badkamer nan nan nan 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 3d04d597-2bc9-4205-b6e7-877b82f0ffe4 9.08 instal. ruimte nan nan nan 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building e626aa4b-c738-4ade-a2c1-c91aa2daa4b6 A3.01 overloop nan nan nan 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building"},{"location":"features/create-spatial-unit-spatialZone/#list-of-spaces-with-the-corresponding-spatialzones-of-ifc-schependomlaan","title":"List of Spaces with the corresponding SpatialZones of IFC Schependomlaan","text":"space_id space_name space_longname spatialzone_name spatialzone_longname spatialzone_type storey_id storey_name building_id building_name d4141660-7677-49d8-9cc1-d96d80b0618a 1.00 entree 00.01 Apartment 00.01 Apartment Private Parts - Apartment 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 0e44feae-35d6-452c-ae59-fd5d4479e2ae 1.01 mk 00.01 Apartment 00.01 Apartment Private Parts - Apartment 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 4e60658c-4a93-4fe1-b642-7aaabfeb8fe9 1.02 toilet 00.01 Apartment 00.01 Apartment Private Parts - Apartment 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 255e8da7-f833-4cd6-b9fc-51b4df1ee11e 1.02 toilet 00.01 Apartment 00.01 Apartment Private Parts - Apartment 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building db806df3-e245-4a16-9858-358843d58be5 1.03 woonkamer 00.01 Apartment 00.01 Apartment Private Parts - Apartment 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 5c1788cb-3b4f-491f-942f-512f732223eb 1.04 keuken 00.01 Apartment 00.01 Apartment Private Parts - Apartment 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building f0028917-8d2b-4483-8d15-286079cfe653 1.05 slaapkamer 00.01 Apartment 00.01 Apartment Private Parts - Apartment 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 13badbc8-ddd4-4574-b2e6-634d636ed980 1.06 badkamer 00.01 Apartment 00.01 Apartment Private Parts - Apartment 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 1912449b-86a3-4985-99fb-4f29e1670d92 1.07 instal. ruimte 00.01 Apartment 00.01 Apartment Private Parts - Apartment 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 0db465ff-68ab-4c90-8fe7-992e36945730 2.00 entree 00.02 Apartment 00.02 Apartment Private Parts - Apartment 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 191513ed-452b-4ada-8e63-a0f0404e48dc 2.01 mk 00.02 Apartment 00.02 Apartment Private Parts - Apartment 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building f99fd6d6-2a05-4618-b1a8-e85ff6b58b7f 2.03 woonkamer 00.02 Apartment 00.02 Apartment Private Parts - Apartment 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building b5cf30ec-8cf7-4c7f-a40e-387ec9d2c688 2.04 keuken 00.02 Apartment 00.02 Apartment Private Parts - Apartment 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 502e4848-6b60-4981-9ea6-9d2b741985f1 2.05 gang 00.02 Apartment 00.02 Apartment Private Parts - Apartment 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 24b55506-3614-4a92-85ae-1c0111b16da1 2.06 slaapkamer 1 00.02 Apartment 00.02 Apartment Private Parts - Apartment 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 18d30475-d715-4123-acdf-9df8a43863b4 2.07 slaapkamer 2 00.02 Apartment 00.02 Apartment Private Parts - Apartment 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building a5d652ca-fb20-48a6-9ee3-0584d428e867 2.08 badkamer 00.02 Apartment 00.02 Apartment Private Parts - Apartment 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 025d4fcd-3a77-4deb-8ab8-4bd0007b4dce 2.09 instal. ruimte 00.02 Apartment 00.02 Apartment Private Parts - Apartment 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 42291957-3edd-443d-b4e2-bcf0751f358b 2.10 berging 00.03 Apartment 00.03 Apartment Private Parts - Apartment 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 50103ef1-cd0a-486e-8288-7bb08ac11022 3.00 entree 00.03 Apartment 00.03 Apartment Private Parts - Apartment 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 24dbce38-25d0-4a91-96c7-2b05cd541fa6 3.01 mk 00.03 Apartment 00.03 Apartment Private Parts - Apartment 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 12626d0f-e41e-4c83-a4fd-16605fc725e8 3.02 toilet 00.03 Apartment 00.03 Apartment Private Parts - Apartment 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 763100a6-79f9-4425-9ed3-90b2ce20153a 3.03 woonkamer 00.03 Apartment 00.03 Apartment Private Parts - Apartment 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 40fd27f7-2aaf-43ab-9915-04a305acf1b0 3.04 keuken 00.03 Apartment 00.03 Apartment Private Parts - Apartment 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building f20e64e4-6691-4145-9449-31e4f1a6c020 3.05 gang 00.03 Apartment 00.03 Apartment Private Parts - Apartment 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building c95dadc7-fc39-415b-bc49-1dea3691536c 3.06 slaapkamer 1 00.03 Apartment 00.03 Apartment Private Parts - Apartment 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building af73d12f-8a23-40f1-98e9-8c0b1af687ed 3.07 slaapkamer 2 00.03 Apartment 00.03 Apartment Private Parts - Apartment 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 90854a93-f12a-4aaf-b66c-c5b443ef0017 3.08 badkamer 00.03 Apartment 00.03 Apartment Private Parts - Apartment 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 74460c8d-da97-44a5-a333-37d98a05b8ed 3.09 instal. ruimte 00.03 Apartment 00.03 Apartment Private Parts - Apartment 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building a73ec9a0-46af-4151-9975-177460f56999 A0.00 entree 00.00 Common 00.00 Common Common Parts 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 82bd3e52-fb5f-4503-8c39-7acf7df0e6ac A0.01 instal. ruimte 00.00 Common 00.00 Common Common Parts 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building e35ae068-0478-4e71-9ff9-6d8a19b0323e A0.02 berging 00.00 Common 00.00 Common Common Parts 9c82359a-67c3-49ce-9749-d081f3aa1901 00 begane grond 00dd6c87-6a6e-f482-7490-e6613659708a Building 9e3d3b91-5048-4cee-ad1f-d5debb8ba287 4.00 entree 01.04 Apartment 01.04 Apartment Private Parts - Apartment 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 37e49b23-eb08-436a-b63a-8aad6e9fcbe6 4.01 mk 01.04 Apartment 01.04 Apartment Private Parts - Apartment 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 183cd8e0-ab9d-4c97-9782-2b9c3350d50a 4.02 toilet 01.04 Apartment 01.04 Apartment Private Parts - Apartment 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 8b6e1299-d614-4fc9-b258-55db74423903 4.03 woonkamer 01.04 Apartment 01.04 Apartment Private Parts - Apartment 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building a87bae1f-19a0-4441-b47f-ae791d844acb 4.04 keuken 01.04 Apartment 01.04 Apartment Private Parts - Apartment 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 5b656d6c-e2c1-42bc-bd6c-71290ca1e30c 4.05 slaapkamer 1 01.04 Apartment 01.04 Apartment Private Parts - Apartment 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building cf0cc63a-367b-4555-b7e5-83d432d4f987 4.06 slaapkamer 2 01.04 Apartment 01.04 Apartment Private Parts - Apartment 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building e87e6759-644f-4567-992e-382877efb4f3 4.07 badkamer 01.04 Apartment 01.04 Apartment Private Parts - Apartment 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 09a7206d-82da-4fdd-a5a5-b35b018df683 4.08 instal. ruimte 01.04 Apartment 01.04 Apartment Private Parts - Apartment 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 4adf5603-1d57-48b1-aa81-6cd7caa3230a 5.00 entree 01.05 Apartment 01.05 Apartment Private Parts - Apartment 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 2b802645-17ec-4599-86c9-76b5ea603a06 5.01 mk 01.05 Apartment 01.05 Apartment Private Parts - Apartment 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 8e84831a-e727-437d-89ea-9a533aaec9fe 5.02 toilet 01.05 Apartment 01.05 Apartment Private Parts - Apartment 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 0bdb446f-bc26-45e6-b4d8-29138de8aeac 5.03 woonkamer 01.05 Apartment 01.05 Apartment Private Parts - Apartment 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 592f4e55-c5b3-4d78-a767-bfebf95e25ab 5.04 keuken 01.05 Apartment 01.05 Apartment Private Parts - Apartment 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 38cc76ca-efaa-4ad3-9cbc-30e06e37bcfc 5.05 slaapkamer 1 01.05 Apartment 01.05 Apartment Private Parts - Apartment 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 124a033e-593b-4076-8a8d-7dfa39d131e4 5.06 slaapkamer 2 01.05 Apartment 01.05 Apartment Private Parts - Apartment 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 676b06eb-d7ec-4ec2-8908-92cd912ae31a 5.07 badkamer 01.05 Apartment 01.05 Apartment Private Parts - Apartment 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 5444e211-c46e-4a66-8150-e898f5e25e2b 5.08 instal. ruimte 01.05 Apartment 01.05 Apartment Private Parts - Apartment 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building b6c83c65-9a50-434a-a262-9c7a9866c47f 5.09 kast 01.05 Apartment 01.05 Apartment Private Parts - Apartment 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building a0a6f337-1087-42f1-a96d-34a376b6e0e1 6.00 entree 01.06 Apartment 01.06 Apartment Private Parts - Apartment 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 65ce765b-21bb-4deb-8ea0-16c879183e27 6.01 mk 01.06 Apartment 01.06 Apartment Private Parts - Apartment 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 0982d75a-7284-41c4-8bb2-76b58d57e491 6.02 toilet 01.06 Apartment 01.06 Apartment Private Parts - Apartment 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 2ea86100-b35f-4716-bf36-612c296853e9 6.03 woonkamer 01.06 Apartment 01.06 Apartment Private Parts - Apartment 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building fea074b1-aa73-4bb5-845f-cccdbe74394c 6.04 keuken 01.06 Apartment 01.06 Apartment Private Parts - Apartment 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building dc65dfce-2c8d-4090-bedf-2f67f147815e 6.05 slaapkamer 1 01.06 Apartment 01.06 Apartment Private Parts - Apartment 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 3d07bc83-50d8-48f1-a5c5-2635f880ecbd 6.06 slaapkamer 2 01.06 Apartment 01.06 Apartment Private Parts - Apartment 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building ce99ad82-39ba-4a10-914f-136da87bee84 6.07 badkamer 01.06 Apartment 01.06 Apartment Private Parts - Apartment 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 9061057e-3b37-492d-856c-08647fc48881 6.08 instal. ruimte 01.06 Apartment 01.06 Apartment Private Parts - Apartment 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 2f9d5b90-373e-45e9-b741-6bf6837c2581 A1.01 overloop 00.00 Common 01.00 Common Common Parts 3813aa95-a06c-4028-b7e4-b21f2cba5b8a 01 eerste verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 30186c45-2d2c-4c1a-92fd-3e520e83af0e 7.00 entree 02.07 Apartment 02.07 Apartment Private Parts - Apartment 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building ad23ea9f-8339-4a33-b61f-c1736c1a540e 7.01 mk 02.07 Apartment 02.07 Apartment Private Parts - Apartment 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 3c56aaec-921d-44cc-b18b-1224592d8bdd 7.02 toilet 02.07 Apartment 02.07 Apartment Private Parts - Apartment 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 76de29eb-c020-4e79-a5bd-0ed7c6827466 7.03 woonkamer 02.07 Apartment 02.07 Apartment Private Parts - Apartment 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building ffe7b54f-3cc7-4cb6-b4b5-2914fa1cbed8 7.04 keuken 02.07 Apartment 02.07 Apartment Private Parts - Apartment 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 6aa148cc-4ca4-4a7d-aee1-52e8ae349c5f 7.05 slaapkamer 1 02.07 Apartment 02.07 Apartment Private Parts - Apartment 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building eac234ed-6973-491b-a164-18ea3ff4292b 7.06 slaapkamer 2 02.07 Apartment 02.07 Apartment Private Parts - Apartment 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 70f54dd5-bcf2-4b00-8084-abdbae4a0bfd 7.07 badkamer 02.07 Apartment 02.07 Apartment Private Parts - Apartment 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building d4a13317-f4fe-4299-9b78-f3409494607d 7.08 instal. ruimte 02.07 Apartment 02.07 Apartment Private Parts - Apartment 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 0ce2d3f6-1e1e-4b44-a314-6cd794d775bf 8.00 entree 02.08 Apartment 02.08 Apartment Private Parts - Apartment 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 754368d8-fa84-46ac-be69-0d991d675d67 8.01 mk 02.08 Apartment 02.08 Apartment Private Parts - Apartment 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building b79145c3-70f1-4ad2-bc93-a8b38d62c555 8.02 toilet 02.08 Apartment 02.08 Apartment Private Parts - Apartment 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 24fae3c4-60b6-4241-9ec5-aeae522dc868 8.03 woonkamer 02.08 Apartment 02.08 Apartment Private Parts - Apartment 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building da526ff3-fd78-4ee5-b5d0-0f39ef2ad002 8.04 keuken 02.08 Apartment 02.08 Apartment Private Parts - Apartment 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building b4fae5c3-578a-47eb-a65f-9a189ab4bedb 8.05 slaapkamer 1 02.08 Apartment 02.08 Apartment Private Parts - Apartment 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 55a2c35c-cc9a-4a1a-b1bf-94e8b701f711 8.06 slaapkamer 2 02.08 Apartment 02.08 Apartment Private Parts - Apartment 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 0c4cda91-5635-4c83-81cd-97861e2007d7 8.07 badkamer 02.08 Apartment 02.08 Apartment Private Parts - Apartment 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 76228b65-0e94-41e8-afd0-1a7896150a8c 8.08 instal. ruimte 02.08 Apartment 02.08 Apartment Private Parts - Apartment 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 363a28d9-7e78-4a8c-a932-d758fa09553c 8.09 kast 02.08 Apartment 02.08 Apartment Private Parts - Apartment 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 97c45622-5687-493c-b995-766888ca8a9c A2.01 overloop 00.00 Common 02.00 Common Common Parts 3a674ee9-2548-40c5-936d-abd348c21e8d 02 tweede verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 26255731-3eab-4760-befa-6dd126309bd4 10.00 entree 03.10 Apartment 03.10 Apartment Private Parts - Apartment 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building a2cbf3b3-67ff-429d-8306-f578c314b4f4 10.01 mk 03.10 Apartment 03.10 Apartment Private Parts - Apartment 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 99979f8b-4e97-483b-905c-b454eb11daac 10.02 toilet 03.10 Apartment 03.10 Apartment Private Parts - Apartment 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 2f423a09-aed5-4541-a5db-5c2538242ef5 10.03 woonkamer 03.10 Apartment 03.10 Apartment Private Parts - Apartment 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 37afb7b7-8853-43c5-a36f-5c397ea907d4 10.04 keuken 03.10 Apartment 03.10 Apartment Private Parts - Apartment 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 53d5628c-940e-4e24-9a47-252094299e17 10.05 slaapkamer 03.10 Apartment 03.10 Apartment Private Parts - Apartment 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 42d94669-d1ee-4d3f-9fe1-13a21e8915d4 10.06 onben. ruimte 03.10 Apartment 03.10 Apartment Private Parts - Apartment 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 4abd018d-c095-41ac-8544-f112772c83d8 10.07 badkamer 03.10 Apartment 03.10 Apartment Private Parts - Apartment 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 0f615aab-4637-4b61-9348-50f1996f5ec0 10.08 instal. ruimte 03.10 Apartment 03.10 Apartment Private Parts - Apartment 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 0085ff3d-8503-4d69-9d91-6685fa317c23 9.00 entree 03.09 Apartment 03.09 Apartment Private Parts - Apartment 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 323a5b95-1e23-4d20-a8b0-1a88b329d10b 9.01 mk 03.09 Apartment 03.09 Apartment Private Parts - Apartment 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 9c3aabce-8c60-48b1-891f-8bfb59b6f075 9.02 toilet 03.09 Apartment 03.09 Apartment Private Parts - Apartment 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 60def17e-9b13-4dac-a4aa-999cd8ee076f 9.03 woonkamer 03.09 Apartment 03.09 Apartment Private Parts - Apartment 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building ec404de5-8532-4005-bba3-018f31512955 9.04 keuken 03.09 Apartment 03.09 Apartment Private Parts - Apartment 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building fea59720-007f-4797-8a51-be60dcd9ea8f 9.05 slaapkamer 1 03.09 Apartment 03.09 Apartment Private Parts - Apartment 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 6edb9947-be66-4bdc-9d70-324718d12ce7 9.06 slaapkamer 2 03.09 Apartment 03.09 Apartment Private Parts - Apartment 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building c44d52f7-bd98-4e92-84ee-3c7cf3e1e009 9.07 badkamer 03.09 Apartment 03.09 Apartment Private Parts - Apartment 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building 3d04d597-2bc9-4205-b6e7-877b82f0ffe4 9.08 instal. ruimte 03.09 Apartment 03.09 Apartment Private Parts - Apartment 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building e626aa4b-c738-4ade-a2c1-c91aa2daa4b6 A3.01 overloop 00.00 Common 03.00 Common Common Parts 91f24dc1-a766-4e42-9f22-67cb30042281 03 derde verdieping 00dd6c87-6a6e-f482-7490-e6613659708a Building"},{"location":"features/create-spatial-unit-spatialZone/#issue-for-the-display-of-spaces-for-ifc-schependomlaan","title":"Issue for the display of spaces for IFC Schependomlaan","text":"<p>For some reason, some Ifc Viewers have difficulties in showing Spaces consitently for IFC_Schependomlaan.ifc. This is the case with OpenIFCViewer, That Open and BIMcollab Zoom. Apparently, Solibri Anywhere and Blender with Bonsai do a better job at showing Spaces for IFC_Schependomlaan.ifc.</p> <p>As we can see hereunder, with the display in BIMcollab, the only spaces that are apparent in the structure of the building on the ground floor are the entrance (entree), the storage space (berging) and the installation space (instal. ruimte).</p> <p>The spaces for the apartments are not shown.</p> <p></p>"},{"location":"features/extract-ifc-elements-with-ifcpatch/","title":"Extract Elements from the IFC Model with IfcPatch","text":"Feature Group: Extract <p>This is provided by IfcOpenShell IfcPatch with the recipe ExtractElement</p> <p>Extracting elements from the IFC model is both efficient and convenient when the number of elements that we we want to keep is resonably limited. It is also a an effective way to reduce the size of an IFC model that must be displayed on the screen.</p> <p>IfcPatch is part of IfcOpenShell and let Extract elements</p> <p>IfcPatch has many capabilities embodied in recipes. There is one called ExtractElements that let select the elements that we want to keep.  For instance, we can give a list of Essential Elements with :</p> <p>patch_arguments = [\"IfcWall,IfcSlab,IfcBeam,IfcColumn,IfcWindow,IfcDoor,IfcSpace,IfcStair\"] and get a corresponding IFC with the selected elements</p> <p>BIMCollab display of Essential Elements of Duplex_A_20110907_optimized.ifc</p> <p></p> <p>We can also focus on a specfic aspect as illustrated hereunder where we just extract Spaces and their Furnitures</p> <p>patch_arguments = [\"IfcSpace,IfcFurnishingElement\"]</p> <p>BIMCollab display of Spaces and Furnitures of Duplex_A_20110907_optimized.ifc</p> <p></p>"},{"location":"features/extract-ifc-storeys-with-ifcpatch/","title":"Extract Storeys from the IFC model with IfcPatch","text":"Feature Group: Extract <p>This is provided by IfcOpenShell IfcPatch with the recipe ExtractElement</p> <p>Data and Spatial visualization</p> <p>Extractions are twofold: the invisible part is the set of data that pertain to the spatial unit at hand. On these data, processes can be run to provide metrics / indicators (surfaces and volumes, space types and usage, energy transfer, life cycle, reuse, ...).</p> <p>The visible part is there to help understand the structure of the spatial unit, but also to identify issues, such as components that exibit misclassification and other anomalies.</p>"},{"location":"features/extract-ifc-storeys-with-ifcpatch/#extraction-of-storeys-with-ifcpatch","title":"Extraction of Storeys with IFCPatch","text":"<p>IfcPatch from IfcOpenShell lets split a Building into Storeys, creating one IFC file for each storey.</p> <p>As an illustration, we have hereunder the extraction  of the first level of Duplex_A_20110907_optimized.ifc with IfcPatch. The IFC file used is the one that result from import -&gt; transform to ifcjson -&gt; filter -&gt; transform from ifcjson to ifc. As a result of the filtering, there is no IfcCovering and no IfcFurnishingElement.</p> <p>BIMCollab display of IfcPatch extraction of Level 1 of Duplex_A_20110907_optimized. As seen hereunder, IfcPatch keeps the spaces of the other levels. Here we highlight IfcSpace A203 Bedroom 2</p> <p></p> <p>Hereunder, the display of the selection of Level 1 while highlighting the space A105 Stair  that is part of storey Level 1 but is not limited to storey Level 1</p> <p></p> <p>The file expectedly lost the furnitures. However the Stairs are missing on both sides.</p> <p>There is also a display of walls above the top of the first level, but that's an error in the original file where those walls are defined as part of the Level 1 Storey. This is clearly apparent hereunder with the highlight on wall Basic Wall:Interior - Partition (92mm Stud):144518 that is defined as belonging to Storey Level 1 instead of Level 2.</p> <p></p> <p>Further to the error on the wall, we can observe that one error creates some extra inconsistencies: the door M_Single-Flush:0864 x 2032mm:0864 x 2032mm:150478 which should be in the above wall appears on Level 2 as disconnected from the wall where it is located. Additionnaly, the wall Basic Wall:Interior - Partition (92mm Stud):144586 in yellow on Level 2 is connected to the wall in Level 1 via IfcRelConnectsPathElements.</p> <p>This makes clear that a quality control on the source file is always important. It also makes clear that the visualization of the data with an IFC viewer makes it possible to identify inconsistencies that would otherwise be hardly noticeable .</p> <p></p>"},{"location":"features/extract-spatial-unit-spatialZone/","title":"Extract a SpatialZone - Apartment or Common Parts","text":"Feature Group: Extract <p>This is provided by IfcOpenShell IfcPatch with the recipe ExtractElement</p> <p>Data and Spatial visualization</p> <p>Extractions are twofold: the invisible part is the set of data that pertain to the spatial unit at hand. On these data, processes can be run to provide metrics / indicators (surfaces and volumes, space types and usage, energy transfer, life cycle, reuse, ...).</p> <p>The visible part is there to help understand the structure of the spatial unit, but also to identify issues, such as components that exibit misclassification and other anomalies.</p> <p>Remark: the IfcConnectionGeometry is not made visually apparent in the viewers</p> <p>The extraction of a SpatialZone will collect all walls, slabs, ... doors and windows that are part of the Space Boundary of a Space contained in the SpatialZone. The relationships are also collected. An IfcJson element with type='IfcRelSpaceBoundary' conveys the data for the connection geometry and the details of the IfcConnectionSurfaceGeometry. However, whole walls or slabs are  shown and the connection surface is not made visually apparent in the viewers. </p>"},{"location":"features/extract-spatial-unit-spatialZone/#extraction-of-an-apartment-from-the-database","title":"Extraction of an Apartment from the Database","text":"<p>We can extract an IfcSpatialZone in the same way that we extracted an IfcStorey in Extraction of a Storey from the Database.</p> <p>This works seamlessly. However IFC Schependomlaan has a insconsistent IfcSpaceBoundary values:</p> <ul> <li>for apartments 1 to 3 and 7 to 8, the spaces have Doors but no Windows in their boundary</li> <li>for apartments 4 and 5, the spaces have Windows but no Doors in their boundary</li> </ul>"},{"location":"features/extract-spatial-unit-spatialZone/#extraction-of-appartment-003-of-the-ground-floor-of-ifc-schependomlaan","title":"Extraction of Appartment 0.03 of the Ground Floor of IFC Schependomlaan","text":"<p>Hereunder, we have the result of the extraction including to top slab that are part of the Boundary of Spaces in that apartment.</p> <p></p> <p>Hereunder, we have hidden the top slab and see the layout of Apartment 0.03 with the missing windows. Because we have started the extraction from the IfcSpatialZone as the container, we don't have the IfcRelContainedInSpatialStructure relationship between the IfcBuildingStorey and the contained IfcWall, IfcSlab, IfcDoor, IfcWindow, ... These relationships could be added, but that is not yet done here.</p> <p></p>"},{"location":"features/extract-spatial-unit-spatialZone/#extraction-of-appartment-001-of-the-ground-floor-of-ifc-schependomlaan","title":"Extraction of Appartment 0.01 of the Ground Floor of IFC Schependomlaan","text":"<p>One of the notable strength of extractions is that anomalies show up clearly. Here we have two toilet spaces in the first apartment. In reality, one of them belongs to the second apartment.</p> <p>This was also noticeable with scrutinizing the standard model view, but not obvious.</p> <p></p>"},{"location":"features/extract-spatial-unit-spatialZone/#extraction-of-the-first-duplex-of-duplex_a_20110907_optimized","title":"Extraction of the first duplex of Duplex_A_20110907_optimized","text":"<p>We can see the spaces on the front part of the first floor (living, kitchen, ...) and the spaces on the right side of the second floor (bedroom 1, ...). We also have the space for the stair.</p> <p>We have the walls, slabs, doors, windows that are related to a Space Boundary. We also have the furnitures that are - in IFC - contained in the spaces. For the stair, we have the corresponding space, but not the stair because it is neither related to a Space Boundary nor contained in the space. Adding the stair could be done with some extra development.</p>"},{"location":"features/extract-spatial-unit-spatialZone/#extraction-of-the-second-duplex-of-duplex_a_20110907_optimized","title":"Extraction of the second duplex of Duplex_A_20110907_optimized","text":"<p>We can see the spaces on the back part of the first floor (living, kitchen, ...) and the spaces on the left side of the second floor (bedroom 1, ...). We also have the space for the stair.</p> <p>For components such as walls, slabs, ... and the stair, the same applies as for the first duplex.</p>"},{"location":"features/extract-spatial-unit-spatialZone/#extraction-of-common-parts-from-the-database","title":"Extraction of Common Parts from the Database","text":"<p>In IFC SChependomlaan, we have:</p> <ul> <li>3 common areas on the ground floor</li> <li>1 common area on the other floors (first, second and third)</li> </ul> <p>We have grouped them under 1 single common SpatialZone with spans all floor and is attached to the building via an IfcRelAggregates relationship and to the spaces via IfcRelReferencedInSpatialStructure relationships.</p> <p>The extraction navigates the relationships from the IfcSpatialZone as the parent. Therefore we see the spaces and their boundaries (walls, slabs, door, windows).</p> <p>We provide hereunder two illustrative views. The first display bounding slabs, while the second has hidden those slabs.</p> <p></p> <p></p> <p>With an extract, the data of the SpatialZone is also displayed by BIMcollab Zoom and That Open (Web) as shown hereunder.</p> <p></p> <p></p>"},{"location":"features/extract-spatial-unit-storey/","title":"Extract a Storey from the Database","text":"Feature Group: Extract <p>Data and Spatial visualization</p> <p>Extractions are twofold: the invisible part is the set of data that pertain to the spatial unit at hand. On these data, processes can be run to provide metrics / indicators (surfaces and volumes, space types and usage, energy transfer, life cycle, reuse, ...).</p> <p>The visible part is there to help understand the structure of the spatial unit, but also to identify issues, such as components that exibit misclassification and other anomalies.</p>"},{"location":"features/extract-spatial-unit-storey/#extraction-of-a-storey-from-the-database","title":"Extraction of a Storey from the Database","text":"<p>Here, we work with the database and extract all the elements that are somehow part of a Spatial Unit, referred to in the code as a container. For the container, we start with a building storey.</p> <p>Initially, we work with Duplex_A_20110907_optimized.ifc, which has been filtered (no furnitures) and has several storeys.</p> <p>The target is an IFC(STEP file) that we can visualize with a standard IFC Viewer.</p>"},{"location":"features/extract-spatial-unit-storey/#submit-the-processing-request","title":"Submit the processing request","text":"<p>The extract Import is started by sending a POST with a Json Body as defined in pydantic</p> <pre><code>class ExtractSpatialUnitInstruction(BaseModel):\n    bundleId: str | None = \"1\"\n    elementType: Literal['IfcBuildingStorey', 'IfcZone', 'IfcSpatialZone', 'IfcSpace', 'IfcGroup'] | None = 'IfcBuildingStorey'\n    elementId: str | None = '7b7032cc-b822-417b-9aea-6429f95d6512'\n\n    @computed_field()\n    def includeRelationshipTypes(self) -&gt; str:\n        if self.elementType == 'IfcBuildingStorey':\n            return ['IfcRelAggregates','IfcRelContainedInSpatialStructure','IfcRelFillsElement','IfcRelVoidsElement']\n        elif self.elementType == 'IfcSpatialZone' or self.elementType == 'IfcSpace':\n            return ['IfcRelAggregates','IfcRelContainedInSpatialStructure','IfcRelFillsElement','IfcRelVoidsElement','IfcRelSpaceBoundary','IfcRelReferencedInSpatialStructure']\n        elif self.elementType == 'IfcZone' or self.elementType == 'IfcGroup':\n            return ['IfcRelAggregates','IfcRelContainedInSpatialStructure','IfcRelFillsElement','IfcRelVoidsElement','IfcRelSpaceBoundary','IfcRelReferencedInSpatialStructure']\n        else:\n            return ['IfcRelAggregates','IfcRelContainedInSpatialStructure','IfcRelFillsElement','IfcRelVoidsElement']   \n</code></pre> <p>What needs to be included into includeRelationshipTypes  may be tuned to the source model data and the elementType, - here an IfcBuildingStorey</p>"},{"location":"features/extract-spatial-unit-storey/#processing","title":"Processing","text":"<p>We will use standard features of a database</p> <ul> <li>temporary table creation populated by the result of a query</li> <li>recursive query to find all 'descendants' of the Storey.</li> </ul> <p>The processing is outlined hereunder:</p> <ol> <li>Get the header of the bundle (all ifc's have a header); but we could also create a new one from scratch</li> <li>Get the container, i.e. 'Spatial Unit', e.g. the storey</li> <li>Get the parents of the container with respect to the IfcRelAggregates hierarchy (if the container is e.g., a storey, the parent is usually the building, then the site, then the project). We could possibly attach the selected Storey to the projet, but it's safer to have the hierarchy if relative positioning of elements is the default in the model</li> <li>Get all 'children elements' of the container, and their own 'children', etc. where the 'children' are the elements that are in a graph where 'parents' are the relating elements and the 'children' are the related element in a relationship and 'descent' from the container. For those, we will not get the propertySets, as they are not descendent of the container in the graph. This will be addressed later on.</li> <li>For each element that is a product, we need to get all representations if any</li> <li>Now that we have all elements (except propertySets), we need to look at the elements that are referenced in one of the elements that we have but are NOT already part of the elements that we have. We need to include these elements.</li> <li>We need to get all propertysets which are related to the container or to the elements in the container; there, the properties are the relating elements and we only need to look at properties that have a related element in the previous list of elements. The attention point is that the IfcRelDefinesByProperties will list entities that are not related to the container. We will need to prune these extra references.</li> <li>Now that we have all that is needed for a model, we build an ifcJSON</li> <li>And convert it to an IFC(Step file).</li> </ol>"},{"location":"features/extract-spatial-unit-storey/#view-with-bimcollab-of-extracted-level-1-of-duplex_a_20110907_optimized","title":"View with BIMcollab of extracted Level 1 of Duplex_A_20110907_optimized","text":"<p>We have the elements that we had in IfcPatch (above), but now we also have the stairs.</p> <p>Additionally, with the misconfigured walls in the source IFC we also gained the doors of those walls under 'Unreferenced items' .</p>"},{"location":"features/extract-spatial-unit-storey/#view-with-openifcviewer-of-extracted-level-1-of-duplex_a_20110907_optimized","title":"View with OpenIFCViewer of extracted Level 1 of Duplex_A_20110907_optimized","text":"<p>Compared with BIMcollab, we don't see 'Unregistered items', hence, the erroneously registered walls don't get their doors.</p>"},{"location":"features/extract-spatial-unit-storey/#view-with-that-open-of-extracted-level-1-of-duplex_a_20110907_optimized","title":"View with That Open of extracted Level 1 of Duplex_A_20110907_optimized","text":"<p>The screen capture hereunder has been obtained by selecting the Level 1 storey. In that case we miss the display of the stairs.</p> <p></p>"},{"location":"features/extract-spatial-unit-storey/#remarks-and-to-do","title":"Remarks and to do","text":"<p>We can notice the difference in rendering. That Open does not show the stairs in the view of Level 1 although the stairs are present in the IFC(STEP file). That Open displays the spaces representation as such. With the opacity, it's not possible to see through. But eventually, a stair can be viewed by entering into the space that contain it (with a tricky and uneasy navigation).</p>"},{"location":"features/extract-spatial-unit-storey/#that-open-display-without-selecting-level-1-the-spaces-are-visible","title":"That Open display without selecting Level 1. The spaces are visible","text":""},{"location":"features/extract-spatial-unit-storey/#that-open-display-without-selecting-level-1-toggling-the-dipslay-of-the-space-a105","title":"That Open display without selecting Level 1. Toggling the dipslay of the space A105","text":""},{"location":"features/extract-spatial-unit-storey/#that-open-display-without-selecting-level-1-getting-into-a105-to-see-the-stairs","title":"That Open display without selecting Level 1. Getting into A105 to see the Stairs","text":""},{"location":"features/extract-the-envelope/","title":"Extract the Envelope","text":"Feature Group: Extract <p>Data and Spatial visualization</p> <p>Extractions are twofold: the invisible part is the set of data that pertain to the spatial unit at hand. On these data, processes can be run to provide metrics / indicators (surfaces and volumes, space types and usage, energy transfer, life cycle, reuse, ...).</p> <p>The visible part is there to help understand the structure of the spatial unit, but also to identify issues, such as components that exibit misclassification and other anomalies.</p>"},{"location":"features/extract-the-envelope/#extraction-based-on-object-property-isexternal","title":"Extraction based on object property 'isExternal'","text":"<p>Construction Objects (Walls, Slabs, Columns, Beams, Doors, Windows, ...) have standardized property sets Pset_WallCommon, Pset_SlabCommon, Pset_ColumnCommon, PsetBeamCommon, Pset_DoorCommon, Pset_WindowCommon,  ... that typically have one of their properties related to the fact that is object is (or is not) external.</p> <p>Therefore it is possible to select external objects based on that information.</p>"},{"location":"features/extract-the-envelope/#extraction-of-the-envelope-of-duplex_a_20110907_optimized","title":"Extraction of the envelope of Duplex_A_20110907_optimized","text":"<p>Hereunder, we have the result of the extraction. Top and bottom slabs are not included (data issue). Party walls are also marked as external (data issue). We have highlighted the upper party wall.</p> <p></p>"},{"location":"features/extract-the-envelope/#extraction-of-the-envelope-of-ifc-schependomlaan","title":"Extraction of the envelope of IFC Schependomlaan","text":"<p>Hereunder, we have the result of the extraction. We have hidden the top slabs (roof) to see inside the building. We have highlighted a floor slab to be sure that we can see through the construction to the floor.</p> <p></p>"},{"location":"features/extract-the-envelope/#extraction-of-the-envelope-of-nordiclca_housing_concrete_buildingpermit","title":"Extraction of the envelope of NordicLCA_Housing_Concrete_BuildingPermit","text":"<p>Hereunder, we have the result of the extraction. We have hidden the top slabs (roof) to see inside the building. We have highlighted a floor slab to be sure that we can see through the construction to the floor.</p> <p>We have also the slabs of the terraces which are rightly marked as external but should be removed from the envelope with a more sophisticated filtering (= some more python code).</p> <p></p>"},{"location":"features/extract-the-envelope/#extraction-of-the-envelope-of-nordiclca_office_concrete_buildingpermit","title":"Extraction of the envelope of NordicLCA_Office_Concrete_BuildingPermit","text":"<p>Hereunder, we have the result of the extraction. We have hidden the top slabs (roof) to see inside the building. We have highlighted a floor slab to be sure that we can see through the construction to the floor.</p> <p></p>"},{"location":"features/extract-the-envelope/#the-ifcenvelopeextractor","title":"The IfcEnvelopeExtractor","text":"<p>There are other ways to extract the envelope of a building, but often limited to the geometry which is not our main focus. </p> <p>It is however worth mentioning the IfcEnvelopeExtractor. It  enables users to automatically extract the building shell of an IFC-model and convert it to a CityJSON model. Automating this process allows designs to be quickly and easily analyzed on a city scale without the need for lengthy manual conversions. This is one of the steps required to close the gap between architecture/BIM and city scale models.</p>"},{"location":"features/filter-the-ifcjson-model/","title":"Filter the ifcJSON Model","text":"<p>Feature Group(s): Filter</p>"},{"location":"features/filter-the-ifcjson-model/#filter-the-ifcjson","title":"Filter the IfcJSON","text":"<p> The capability which is demonstrated here is key: we can filter an IFC model and keep only the information that is relevant to a use case, while ensuring the filtered model remain consistent. The filtering approach will obviously need to be fitted to the specific use case at hand. </p> <p>Filtering the content of an IFC is a key element of providing a focused information set that is relevant for a specific administrative use case.</p> <p>A Digital Building Permit will e.g., not need the information for all illustrative furnitures placed in the IfcSpaces. Details on ventilation systems may be relevant or not. Connectedness of walls may be superfluous or not.</p> <p>There are 876 IfcEntities in the spec IFC 4.3.2 Annex B Alphabetical listings - Entities. Which is a lot!</p> <p>There a two ways to filter:</p> <ul> <li>Extraction: select the Elements that we want to keep. This can be done directly on the IFC model with IfcPatch by applying an 'ExtractElements' recipe. This is both efficient and convenient if the list of elements that we want to keep is  limited. Extraction with IfcPatch is illutrated in a separate section (Extract Elements from the IFC model).</li> <li>Filtering out elements that are not needed: this is relatively complex and is the object of this section.</li> </ul> <p>We propose a two-fold approach:</p> <ol> <li>Association of categories (such as 'construction', 'system', ...) to individual entities.  This is defined in the csv under /db/csv/ifc-types-ref.csv. The filter will give the categories that are retained</li> <li>With a given category, some IfcEntities might be superfluous for the use case, so they can be excluded.</li> </ol> <p>The filtering is done by loading the ifcJSON in pandas Dataframes and/or Series, as they provide convenient capabilities.</p> <p>Filtering the elements is not enough. It is critial to ensure that there are no references left to elements that have been filtered out.</p> <p>There are also the relationships that link a relating element (the ''parent'') to a list of related elements (the ''children''). If a ''child'' is removed, it needs to be pruned from the list of related elements. If a ''parent'' loses all its ''children'', it needs to be removed.</p> <p>The relating and related elements are named differently for the many types of relationships. Therefore, there is a csv (in /db/csv/ifc-relationships-ref.csv) that documents, for each relationship type, the names that must be used for the ''relating'' and the ''related'' elements.</p> <p>The processing is then straightforward:</p> <ol> <li>Filter the model</li> <li>Split de list of entities is 4 groups (following the proposed Physical Table Model):<ul> <li>Representations</li> <li>PropertySets</li> <li>Relationships</li> <li>Objects: all entities that are not in one of the 3 others</li> </ul> </li> <li>Drop representations that are not related to objects retained in the model</li> <li>Prune the related members in the relationships; if there is no related left, then:<ul> <li>if the relating is a property_set:  drop the property_set</li> <li>in all cases: drop the relationship</li> </ul> </li> </ol> <p>At the end, the filtered model is saved as an ifcJSON.</p>"},{"location":"features/filter-the-ifcjson-model/#update-the-bundle-and-the-bundlejournal","title":"Update the bundle and the bundleJournal","text":"<pre><code>flowchart TB\n    bundle\n    bundleJournal\n    bundle --o bundleJournal</code></pre> <ul> <li>update the bundle row</li> <li>add an entry in the bundleJournal</li> </ul>"},{"location":"features/generate-the-ifc-model-with-IfcOpenShell/","title":"Generate the IFC model with IfcOpenShell","text":"<p>TO DO</p>"},{"location":"features/import-and-transform/","title":"Import an IFC2X3, IFC4 or IFC4X3 and transform it to an ifcJSON","text":"Feature Group: Workflow <p>Execution of a series actions: migrate schema (if needed), validate, tesselate (if needed), convert to IfcJSON.</p> <p> The capability which is demonstrated here is simple: we can import an IFC (Step file) from a remote source and tranform it to an ifcJSON that will be available for the next steps in a straight-through processing manner </p>"},{"location":"features/import-and-transform/#submit-the-processing-request","title":"Submit the processing request","text":"<p>Import is started by sending a POST with a Json Body as defined in pydantic</p> <pre><code>class ImportFilter(BaseModel):\n    categoryList: list[Literal['construction','furniture','group','material','ownership','project','propertySet','quantity','relationship','representation','space','system']] | None = ['construction','group','material','ownership','project','propertySet','quantity','relationship','representation','space'] \n    excludeTypeList: list[str] | None = ['IfcBuildingElement','IfcBuildingElementPart','IfcBuildingElementProxy','IfcBuildingElementProxyType']\n\nclass TesselateElements(BaseModel):\n    elementTypes: list[str] | None = [\"IfcWall,IfcWallStandardCase,IfcSlab,IfcBeam,IfcColumn,IfcWindow,IfcDoor,IfcSpace\"]\n    forcedFacetedBREP: bool | None = False\n\nclass ImportInstruction(BaseModel):\n    sourceFileURL: str | None = \"http://localhost:8002/IFC_SOURCE_FILES/AC20-FZK-Haus.ifc\"\n    modelType: Literal['ifc']\n    migrateSchema: bool | None = False\n    tessellate: bool | None = True\n    spatialUnitId: str | None = \"b6fc5402-ca87-47ba-a9f4-e29173d51656\"\n    parentBundleId : str | None = None  \n    bundleId: str | None = None\n    withFilter: bool | None = False\n    filter: ImportFilter \n    tessellateElements: TesselateElements\n</code></pre> <p>FastAPI provides by default at /docs a swagger utility that simplifies the execution of tests.</p> <p>The request provides:</p> <ul> <li>default values that must be adjusted to your specific case</li> <li>the filter (more on that in filter the model)</li> <li>the option to migrate the schema in the IFC file. This applies only to the migration from IFC2X3 to IFC4. There is no migration for IFC schema IFC4 and IFC4X3 and the value of migrateSchema will be ignored</li> <li>the option to tessellate the representation of the products (IfcWall, IfcSlab, ...). To be tessellated, an IFC2X3 must also be migrated to IFC4 (migrateSchema = True). Tessellation is based on IfcPatch with recipe = 'TesselateElements'. The default list of elements is [].</li> </ul> <p>For a new primary import, the parentBundleId and the bundleId must be None, i.e. removed from the request.</p> <p></p>"},{"location":"features/import-and-transform/#service-the-request","title":"Service the request","text":"<p>This is done in the Service Layer where a chain of task is composed and sent for execution by a Celery Worker via a message in the Message Broker(Redis)</p>"},{"location":"features/import-and-transform/#get-ifc-from-a-remote-location","title":"Get IFC from a remote location","text":"<p>Currently all IFC files are store locally and served with Nodejs http-server.</p>"},{"location":"features/import-and-transform/#migrate-the-ifc-file-from-ifc2x3-to-ifc4-with-ifcpatch","title":"Migrate the IFC file from IFC2X3 to IFC4 with IfcPatch","text":"<p>This is done with the IfcPatch 'Migrate' recipe before the conversion to ifcJSON provided that migrateSchema is set to True.</p>"},{"location":"features/import-and-transform/#create-the-ifcjson-with-ifc2json","title":"Create the ifcJSON with IFC2JSON","text":"<p>Read file and create ifcjson model with NO_INVERSE=True.</p>"},{"location":"features/import-and-transform/#create-the-bundle-and-update-the-bundlejournal","title":"Create the Bundle and Update the bundleJournal","text":"<pre><code>flowchart TB\n    bundle\n    bundleJournal\n    spatialUnit\n    bundleUnit\n    spatialUnitBundleUnit\n    spatialUnitBundleUnit --o bundleUnit\n    spatialUnitBundleUnit --o spatialUnit\n    bundle --o bundleUnit\n    bundle --o bundleJournal</code></pre> <p>The database is updated with:</p> <ul> <li>an entry in the bundle table</li> <li>an entry in the bundleJournal table</li> <li>an entry in the bundleUnit as a root entity (the project)</li> <li>an entry in the spatialUnitBundleUnit table</li> </ul>"},{"location":"features/import-and-transform/#issues-will-need-a-follow-up","title":"Issues (will need a follow-up)","text":"<p>Note</p> <p>Tessellate does not maintain the style (this is a known feature / bug). In the present state, tesselation should better not be used on the primary import.</p> <p>Note</p> <p>Error with IfcExternalReference not supported. When present, I get the following error: 'AttributeError(\"entity instance of type 'IFC4.IfcExternalReference' has no attribute 'wrappedValue'\")</p> <p>Note</p> <p>with NO_INVERSE = False for LARGE_MODEL_20210219Architecture.ifc, the program got stuck somewhere. I stopped after 23m 53.2s</p>"},{"location":"features/import-non-ifc-model/","title":"Import Non IFC Model","text":"<p>TO DO</p>"},{"location":"features/introduction/","title":"Introduction","text":""},{"location":"features/introduction/#foreword","title":"Foreword","text":"<p>Because d4SU is not yet a production environment for specific identified administrative processes, the presented features are actually illustrations of capabilities rather that a set of product features.</p> <p>Features specific to the platform rely on Python tools such as IfcOpenShell-python, pandas DataFrames and Series.</p> <p>However, other features rely explicitely on standard SQL and other constructs that are programming language agnostic. The code is in Python but could as well be in Typescript, Rust, Java, C#, ...</p> <p>Unless explicitly specified only IFC2X3, IFC4X* are supported. IFC5 is still under development.</p>"},{"location":"features/introduction/#key-functional-features","title":"Key Functional Features","text":"<p>As stated in the Architecture there are 8 groups of features targeted by d4SU</p> <ul> <li>CRUD: create, read, update, delete objects, relationships, properties and representations in a Model</li> <li>Check: validate a Model against one or more requirements</li> <li>Filter: select coherent a subset of objects, relationhips, properties and representation in a Model</li> <li>Convert: convert a Model from one format/schema to another</li> <li>Geometry: provide capabilities that change the type of a represention or complement the exisiting representation with a new one</li> <li>Extract: extract a subset of objects, relationships, properties and representations and provide a corresponding Model.</li> <li>Host: host 'third-party' domain functions (related to LCA, BAMB, EPC, ...)</li> <li>workflow: chain of operations leveraging the other features.</li> </ul> <p>Tools involved in the implementation of a feature are listed in a top note of the feature documentation page.</p>"},{"location":"features/introduction/#code-structure","title":"Code structure","text":"<p>The code is availble on GitHub under /src with a specific structure</p> directory use /web API layer /service Service layer /model Model layer; provides the models and the tables definitions /data Data layer; takes care of all that pertains to CRUD on postgreSQL or to read/write of files through PyArrow /ifcpatch a localcopy of IfcPatch (possibly with small adjustments) /local_module Modules from other sources such as IfcOpenShell (possibly with small adjustments) /long_bg_task Base for Celery (with celery.py and task.py) /long_bg_task/Task_modules Long running background tasks (executed by a Celery Worker). By 'long running', it is meant 'with a runtime measured in hundreds of milliseconds or in seconds'"},{"location":"features/introduction/#worflows","title":"Worflows","text":"<p>The following schema shows key expected workflows </p> <pre><code>block-beta\n    columns 5\n    blockArrowId1&lt;[\"&lt;/br&gt;1. Import a model&lt;/br&gt;from a BIM/IFC file&lt;/br&gt;&amp;nbsp;\"]&gt;(right)\n    blockArrowId2&lt;[\"2. Filter the model and&lt;/br&gt; keep only essential&lt;/br&gt; elements for the &lt;/br&gt;use case at hand\"]&gt;(right)\n    space:3\n    space:1\n    blockArrowId3&lt;[\"&amp;nbsp;&lt;/br&gt;3. Store the ifcJSON in&lt;/br&gt;the Database&lt;/br&gt;&amp;nbsp;\"]&gt;(right)\n    blockArrowId4&lt;[\"4. Extract the data&lt;/br&gt;for target&lt;/br&gt; Spatial Unit(s) /&lt;/br&gt;Spatial Zone(s)\"]&gt;(right)\n    blockArrowId5&lt;[\"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\"]&gt;(down)\n    space:2\n    blockArrowId12&lt;[\"&lt;/br&gt;9. Store an ifcJSON&lt;br/&gt; for the bespoke model&lt;/br&gt;&amp;nbsp;\"]&gt;(right)\n    blockArrowId10&lt;[\"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\"]&gt;(right)\n    blockArrowId6&lt;[\"5. Enrich / Complement&lt;/br&gt;the data for the&lt;/br&gt;use case at hand\"]&gt;(y)\n    blockArrowId7&lt;[\"6. Create a semantically&lt;/br&gt; rich 3D representation&lt;/br&gt;that can be explored&lt;/br&gt; with an IFC Viewer\"]&gt;(right)\n    blockArrowId8&lt;[\"&lt;/br&gt;7. Import a bespoke&lt;/br&gt;non BIM/IFC model&lt;/br&gt;&amp;nbsp;\"]&gt;(right)\n    blockArrowId9&lt;[\"&lt;/br&gt;8. Store the model&lt;/br&gt;into the database&lt;/br&gt;&amp;nbsp;\"]&gt;(up)\n    space:2</code></pre> <p>This diagram provide a high level story board of what we want to show/validate</p> <ol> <li>Import a BIM/IFC from an external source, convert the schema if appropriate, validate the IFC against an IDS and transform the valid IFC into an ifcJSON</li> <li>Filter the ifcJSON while retaining only the elements that are relevant for the use case(s) at hand. In some cases, the Administrative Authority  may have detailed what is expected in the BIM/IFC. This is the case for the Digital Building Permit of Dubai where detailed templates and instructions are provided for Archicad, Bentley OpenBuilding and Revit so that the exported BIM/IFC is fully adequate for the use of the Administrative Authority. However, this might be difficult to generalize and we start with the assumption that a single BIM/IFC will potentially be used across distinct Administrative Authorities and need to be filtered depending on the use case(s) at hand.  </li> <li>Store the ifcJSON into the database (PostgreSQL)</li> <li>Extract the data from the database for a target 'Spatial Unit' (a Building, a Storey, an Apartment, Common part(s),...), while leveraging the power of SQL, possibly complemented by other capabilities when needed.</li> <li>Enrich/Complement the data for the use case at hand. This means, create new groups (such as Zones, Spatial Zones or simply Groups) an create/update PropertySets. This is where external applications will highly interact with d4SU platform.</li> <li>Read data from the database and rebuild an ifcJSON with the relevant data and convert it to an IFC file so that standard IFC viewer can be used to navigate through the data (not just a 3D shape)</li> <li>Import a bespoke non BIM/IFC model (typically from a legacy system). The import will transform the legacy model into 'objects', 'representations', 'relationships' and 'propertySets'. We assume that it cannot be expected that every input will be BIM/IFC from day one or that the past can be ignored. Therefore, other models must be accounted for.</li> <li>Store the bespoke model into the database</li> <li>Create and Store an ifcJSON for the bespoke model. From there it will behave as a standard BIM model, although not suited for use by the AEC insdustry to 'construct' the represented building or part thereof. We will give an example of how simple it is to build an IFC from a model using IfcOpenShell. But practically, creating a meaningful IFC for a bespoke model will always require a development to accomodate the specifics of the model.</li> </ol>"},{"location":"features/introduction/#from-api-to-database","title":"From API to Database","text":"<pre><code>flowchart LR\n    Ifc\n    Custom[\"Custom Model\"]\n    ifcJSON\n    Other[\"CityJSON, LDB, glTF,...\"]\n    DB[(\"Database\")]\n    API &lt;--&gt; IfcOpenShell\n    API &lt;--&gt; SQL\n    API &lt;--&gt; ifcJSON\n    API &lt;--&gt; Graph\n    Graph &lt;--&gt; DB\n    Custom -- convert --&gt; Ifc\n    Custom -- is stored --&gt; DB\n    SQL &lt;--&gt; DB\n    IfcOpenShell --&gt; Ifc\n    Ifc &lt;-- convert --&gt; ifcJSON\n    Ifc --&gt; Other\n    Other --&gt; Ifc\n    ifcJSON &lt;-- store | retrieve --&gt; DB\n    style API fill:#148F77\n    style DB fill:#148F77</code></pre> <p>Technically speaking, FastAPI and Celery provide the glue to bring together the capabilities provided by the BIM/IFC ecosystem in order to cover the needs of d4SU.</p> <p>On the left we have the API and on the right we have the Database. Between them, different representations are activated to leverage the capabilities of IfcOpenShell (including IfcPatch, IfcConvert), IfcJSON (two-way conversion between IFC(STEP Model &amp; file) and IfcJSON (a JSON Model &amp; file)), SQL and possibly CYPHER. Also, different conversion tools can be enacted to produce other representations: e.g.:</p> <ul> <li>COLLADA or glTF for Google Earth, Cesium, ... (IfcConvert)</li> <li>CityJSON for GIS applications (IfcConvert, IfcCityJson)</li> <li>LBD (Linked Building Data) with IFCtoLBD</li> </ul> <p>Complex sequences of transformations can be executed, with the help of IfcPatch to:</p> <ul> <li>Extract elements of the model, for instance all standards elements [Wall, Slabs, Beams, Columns, Windows, Doors, Spaces, Stairs]</li> <li>Split in Storeys / Levels</li> <li>Migrate a version, e.g from Ifc 2x3 to Ifc 4</li> <li>Purge Data</li> <li>Tesselate elements (simplify geometry rendering)</li> </ul> <p>Link to other Capabilities (examples)</p> <p>As more functionalities are made available, they could be leveraged by the platform. E.g., IfcLCA for Life Cycle Analysis or bim2sim for Heating, Ventilation Air-conditioning (HVAC), Building Performance Simulation (BPS) or Computational Fluid Dynamics (CFD)</p>"},{"location":"features/introduction/#ifc-files","title":"Ifc Files","text":"<p>Ifc files used for tests and explorations come from reference sources such as:</p> <ul> <li>The OPENIFC MODEL REPOSITORY</li> <li>The buildingSMART Sample &amp; Test Files</li> <li>Karlsruhe Institute of Technology (KIT), IFC Examples</li> </ul> <p>The following files have been extensively used:</p> <ul> <li>Duplex_A_20110907_optimized.ifc; 'Autodesk Revit Architecture 2011 - 1.0','20100326_1700 (Solibri IFC Optimizer)',''); FILE_SCHEMA(('IFC2X3'));</li> <li>IFC Schependomlaan.ifc; with BREP geometry and 2ndLevel IfcRelSpaceBoundary. IFC file generated by Graphisoft ArchiCAD-64 18.0.0 NED FULL Windows version (IFC2x3 add-on version: 6000 NED FULL)</li> <li>Duplex_M_20111024_ROOMS_AND_SPACES.ifc; with BREP Geometry; 'Autodesk Revit MEP 2011 - 1.0','20100903_2115(x64)','');FILE_SCHEMA(('IFC2X3'));</li> <li>ARK_NordicLCA_Housing_Concrete_BuildingPermit_Revit.ifc; Autodesk Revit 24.0.5.432 (ENU) - IFC 24.0.5.432','');FILE_SCHEMA(('IFC4'))</li> <li>AC20-FZK-Haus.ifc; an IFC demo model with an extensive use of IFC modeling capabilities (e.g. use of product types with representationMaps instead of direct product representations).</li> </ul>"},{"location":"features/introduction/#duplex_a_20110907_optimizedifc","title":"Duplex_A_20110907_optimized.ifc","text":"<p>The file Duplex_A_20110907_optimized.ifc provides a model with many features. The model contains as usual a project with a building and several storeys. Also,  as usual,  there are walls, slabs, beams, doors, windows, stairs, spaces and furnishing elements. Spaces are delimited by  'IfcRelSpaceBoundary' '1stLevel' relationships that provide space delimiters such as  'walls', 'slabs', 'doors', 'windows'. Also, there are many 'IfcRelConnectsElements' that documents the connections between walls and have some side effects that must be handled.</p>"},{"location":"features/introduction/#view-of-duplex_a_20110907_optimizedifc-with-openifcviewer","title":"View of Duplex_A_20110907_optimized.ifc with OpenIFCViewer","text":""},{"location":"features/introduction/#view-of-duplex_a_20110907_optimizedifc-with-that-open","title":"View of Duplex_A_20110907_optimized.ifc with That Open","text":""},{"location":"features/introduction/#view-of-duplex_a_20110907_optimizedifc-with-bimcollab-zoom","title":"View of Duplex_A_20110907_optimized.ifc with BIMCollab zoom","text":""},{"location":"features/introduction/#view-of-duplex_a_20110907_optimizedifc-with-solibri-anywhere","title":"View of Duplex_A_20110907_optimized.ifc with Solibri Anywhere","text":""},{"location":"features/introduction/#ifc-schependomlaanifc","title":"IFC Schependomlaan.ifc","text":"<p>IFC Schependomlaan.ifc is a typically rich (hence complex) IFC file. Among its many features it contains a SpaceBoundary2ndLevelView. Spaces are delimited by 'IfcRelSpaceBoundary' '2ndLevel' relationships that are suited for energy analysis. There are however some anomalies in the file. There are 10 apartments in the building, some have doors (an not windows) in the space boundary and some have windows (and not doors) in the space boundary.</p> <p></p>"},{"location":"features/introduction/#residential-building-from-nordic-sustainable-construction-bim4lca-files","title":"Residential Building from Nordic Sustainable Construction BIM4LCA Files","text":"<p>BIM4LCA - Residential Building is a recent set of IFC files with different variants published 09/2024. According to the publishing site, \"In all design phases of the project, the disciplines carried out the design work solely by modelling. As a result, several model versions were produced. All the models are available to download... They are free for anyone to use under the Creative Commons license (CC BY-SA 4.0)\". Spaces are delimited by 'IfcRelSpaceBoundary' '2ndLevel' relationships that are - expectedly - suited for energy analysis.</p>"},{"location":"features/introduction/#residential-building-architecture","title":"Residential Building Architecture","text":""},{"location":"features/introduction/#residential-building-hvac","title":"Residential Building HVAC","text":""},{"location":"features/introduction/#residential-building-electricity","title":"Residential Building Electricity","text":""},{"location":"features/introduction/#office-building-from-nordic-sustainable-construction-bim4lca-files","title":"Office Building from Nordic Sustainable Construction BIM4LCA Files","text":""},{"location":"features/introduction/#office-building-architecture","title":"Office Building Architecture","text":""},{"location":"features/introduction/#office-building-hvac","title":"Office Building HVAC","text":""},{"location":"features/introduction/#office-building-electricity","title":"Office Building Electricity","text":""},{"location":"features/introduction/#ac20-fzk-haus","title":"AC20-FZK-Haus","text":""},{"location":"features/read-model-from-db/","title":"Read the ifcJSON model from the Database","text":"Feature Group(s): CRUD <p>This is very simple:</p> <ul> <li>Get the objects from the object table ifcjson field</li> <li>Get the representations from the representation table ifcjson field</li> <li>Get the propertySets from the propertyset table ifcjson field</li> <li>Get the relationships from the relationship table ifcjson field</li> </ul> <p>Get the header from the bundle table or create a new one.</p> <p>Load all in an ifcJSON and store it. Done!</p>"},{"location":"features/references/","title":"References","text":""},{"location":"features/references/#papers","title":"Papers","text":""},{"location":"features/references/#ifc-to-citygml","title":"IFC to CityGML","text":"<p>Automatic conversion of IFC datasets to geometrically and semantically correct CityGML LOD3 buildings  (https://3d.bk.tudelft.nl/hledoux/pdfs/16_tgis_ifcitygml.pdf).</p>"},{"location":"features/references/#tools","title":"Tools","text":""},{"location":"features/references/#batchplan","title":"BATCHPLAN","text":"<ul> <li>BATCHPLAN: A LARGE SCALE SOLUTION FOR FLOOR PLAN EXTRACTION</li> <li>code on Github</li> </ul>"},{"location":"features/references/#ifc-entities","title":"Ifc Entities","text":"<p>IFC 4.3.2 Annex B Alphabetical listings - Entities</p>"},{"location":"features/references/#ifccityjson-one-way-from-cityjson-to-ifc","title":"IFCCityJSON one way from CityJSON to IFC","text":"<ul> <li>IFCCityJSON one way from CityJSON to IFC.</li> <li>IfcOpenShell Documentation / IfcCityJSON</li> <li>Getting started with CityJSON</li> </ul>"},{"location":"features/references/#cityjson-validator","title":"CityJSON Validator","text":"<p>CityJSON Validator</p>"},{"location":"features/references/#cityjson-toolkit-cjio","title":"CityJSON Toolkit cjio","text":"<p>cityjson toolkit cjio</p>"},{"location":"features/references/#ifcconvert","title":"IfcConvert","text":"<p>IfcConvert - Usage IfcConvert Download</p>"},{"location":"features/references/#online-3d-viewer","title":"Online 3D Viewer","text":"<p>Online 3D Viewer</p>"},{"location":"features/references/#ninja-viewer","title":"Ninja Viewer","text":"<p>ninja viewer code available on github</p>"},{"location":"features/references/#ifcpatch","title":"IfcPatch","text":"<p>IfcPatch</p>"},{"location":"features/references/#ifcenvelopeextractor","title":"IfcEnvelopeExtractor","text":"<p>IfcEnvelopeExtractor</p>"},{"location":"features/references/#ifc2json","title":"Ifc2JSON","text":"<p>IFC2JSON</p>"},{"location":"features/references/#ifctolbd","title":"IFCtoLBD","text":"<p>Ifc to Linked Building Data</p> <p>IFCtoLBD</p>"},{"location":"features/references/#ifclca","title":"IfcLCA","text":"<p>Ifc Life Cycle Analysis</p> <p>IfcLCA</p>"},{"location":"features/references/#bim2sim","title":"bim2sim","text":"<p>bim2sim</p>"},{"location":"features/references/#solutions","title":"Solutions","text":""},{"location":"features/references/#3dcitydb","title":"3DCityDB","text":"<p>3DCityDB</p>"},{"location":"features/references/#digital-building-permit-of-dubai","title":"Digital Building Permit of Dubai","text":"<p>Digital Building Permit of Dubai</p>"},{"location":"features/references/#ifc-sample-files","title":"IFC Sample Files","text":""},{"location":"features/references/#ifc-repositories","title":"IFC Repositories","text":"<ul> <li>The OPENIFC MODEL REPOSITORY</li> <li>The buildingSMART Sample &amp; Test Files</li> <li>Karlsruhe Institute of Technology (KIT), IFC Examples</li> </ul>"},{"location":"features/references/#ifc-files-used","title":"IFC Files Used","text":"<ul> <li>Duplex_A_20110907_optimized.ifc</li> <li>IFC Schependomlaan.ifc</li> <li>Duplex_M_20111024_ROOMS_AND_SPACES.ifc</li> </ul> <p>From Nordic Sustainable Construction:</p> <ul> <li>ARK_NordicLCA_Housing_Concrete_BuildingPermit_Revit.ifc -- Architecture</li> <li>HVAC_NordicLCA_Housing_Concrete_BuildingPermit.ifc -- HVAC</li> <li>ELE_NordicLCA_Housing_Concrete_BuildingPermit.ifc -- Electricity</li> <li>ARK_NordicLCA_Office_Concrete_As-Built_Revit.ifc -- Architecture</li> <li>HVAC_NordicLCA_Office_Concrete_BuildingPermit.ifc -- HVAC</li> <li>ELE_NordicLCA_Housing_Timber_BuildingPermit.ifc -- Electricity</li> </ul> <p>More information on these files at</p> <p>https://www.nordicsustainableconstruction.com/knowledge/2024/september/bim-for-building-lca</p> <p>https://www.nordicsustainableconstruction.com/Media/638616414274636915/BIM%20for%20Building%20LCA_Enhancing%20Nordic%20Sustainable%20Construction%20Through%20Digitalisation.pdf</p> <p>https://www.youtube.com/playlist?list=PLKuMoWj9yd7Ww3rne-uU3iq-LM2IypfE9&amp;jct=zFxiyDdah8WJ_MAxaWlYEA</p>"},{"location":"features/store-in-database/","title":"Store the ifcJSON in the Database","text":"Feature Group: CRUD"},{"location":"features/store-in-database/#store-the-ifcjson","title":"Store the ifcJSON","text":"<p>This is done by reading the ifcJSON, loading it in pandas DataFrame and or Series and splitting it in categories.</p> <ul> <li>Representations</li> <li>PropertySets</li> <li>Relationships</li> <li>Objects: all entities that are not in one of the 3 others</li> </ul> <p>Thereafter, there is a basic processing to adjust to the Physical model which is under /src/model/common.py with SQLModel / Pydantic definitions. Hereunder the example of the object table.</p> <pre><code>class object(SQLModel, table=True):\n    bundle_id: int = Field(nullable=False, alias='bundleId', primary_key=True)\n    object_id: UUID4 = Field(primary_key=True)\n    type: str = Field(nullable=False)\n    name: str = Field(nullable=True) # have object with no name (e.g. IfcOpeningElement)\n    representation_ids: list[str] = Field(sa_column=Column(ARRAY(String(36))), default=[], alias='representationIds')\n    elementjson: dict = Field(sa_column=Column(JSON), default={}, alias='elementJson')\n    created_at: datetime.datetime = Field(sa_column=Column(DateTime(), default=func.now(), nullable=False))\n    updated_at: Optional[datetime.datetime] = Field(sa_column=Column(DateTime(), nullable=True ))\n</code></pre> <ul> <li>The object_id is the IFC globalId in expanded format as provided by IFC2JSON.</li> <li>The type is the IfcEntity Name (IfcProject, IfcSite, IfcBuilding,  IfcBuildingStorey, ...). It could be replaced by a shorter id (e.g. int).</li> <li>The name is the name provided in the IFC. In principle it should bear some meaning, but that is not always the case. In some IFC, it may just not provided.</li> <li>The representation_ids (list / array) are the ids of the representations (geometries). They are extracted from the entity json to be available for queries</li> <li>The ifcjson is the copy of the entity dictionary provided by ifcJSON. It is not exploded and can be processed as needed by a specific use case.</li> </ul> <p>The other tables follow the same pattern. It is worth noting that FastAPI/ SQLModel/SQLAlchemy can create all tables that where not already there on startup of the server (or when needed).</p> <p>The database is PostgreSQL. For this upload, bulk inserts are used, following the guidelines of Fastest-Methods-to-Bulk-Insert-Pandas-Dataframe-into-PostgreSQL using psycopg2 copy_expert()</p>"},{"location":"features/store-in-database/#complement-the-bundle-data","title":"Complement the bundle data","text":"<pre><code>flowchart TB\n    bundle\n    bundleJournal\n    spatialUnit[\"spatial=Unit: root\"]\n    bundleUnit[\"bundleUnit: root\"]\n    spatialUnitBundleUnit\n    spatialUnitBundleUnit --o bundleUnit\n    spatialUnitBundleUnit --o spatialUnit\n    bundle --o bundleUnit\n    bundle --o bundleJournal\n    bundleUnit --o bundleUnitSite[\"bundleUnit: site\"]\n    bundleUnitSite --o bundleUnitBuilding[\"bundleUnit: building\"]\n    bundleUnitBuilding --o bundleUnitStorey[\"bundleUnit: storey\"] \n    bundleUnitStorey --o bundleUnitSpace[\"bundleUnit: space\"] </code></pre>"},{"location":"features/transform-to-ifc/","title":"Transform to IFC","text":"Feature Group(s): Convert"},{"location":"features/transform-to-ifc/#first-results","title":"First Results","text":"<p>This reads an ifcJSON file and convert it to IFC(STEP file). This is a critically important to evaluate the success of filtering or enhancing the model as it provides a way to vizualize the results with an IFC viewer.</p> <p>It has been use in different scenarios</p> <ol> <li>Roundtrip<ul> <li>convert an IFC(STEP file) to a jsonIFC</li> <li>convert back the jsonIFC to an IFC(STEP file) using JSON2IFC</li> <li>it should be the same as the original one</li> <li>there are, for the moment, some issues that are documented hereafter  </li> </ul> </li> <li>Filter and visualize the changes<ul> <li>convert an IFC(STEP file) to a jsonIFC</li> <li>filter the ifcJSON</li> <li>store the filtered model in the DB</li> <li>read it from the DB and write an ifcJSON based on the data from the DB</li> <li>convert the jsonIFC to an IFC(STEP file) using JSON2IFC</li> <li>it should show the changes:  in our scenario, we dropped the furnitures in the spaces and they are indeed not present anymore</li> </ul> </li> <li>Extract a 'Spatial Unit' (starting with an IfcBuildingStorey)<ul> <li>select data from the database to keep only the data that are relevant for the IfcBuildingStorey</li> <li>create an ifcJSON with the data</li> <li>convert the jsonIFC to an IFC(STEP file) using JSON2IFC</li> <li>it should show the result:  data from the 'Spatial Unit' (starting with an IfcBuilding)</li> </ul> </li> <li>As we create other scenarios, we will provide variations on those cases.</li> </ol>"},{"location":"features/transform-to-ifc/#issues-will-need-a-follow-up","title":"Issues (will need a follow-up)","text":"<p>Note</p> <p>The model(s) loose some features. For the most Viewers (OpenIfcViewer, That Open, BIMcollab Zoom), the models have apparently lost the style (color) of the walls and slabs and windows and transparency is lost. We can't see through the windows glass anymore. However, with Solibri Anywhere, the problem is not apparent.</p> <p>Note</p> <p>There are other 'unknown issues' with LARGE_MODEL_20210219Architecture.ifc. After an hour it was still busy. The issue is probably linked to the issue we had with NO_INVERSE = False in IFC2JSON.</p>"},{"location":"features/transform-to-ifc/#view-with-bimcollab-of-duplex_a_20110907_optimizedifc-after-filtering","title":"View with BIMcollab of Duplex_A_20110907_optimized.ifc after filtering","text":"<p>The problem with the color and transparecy is manifest. It may be that the loss happens early at the IFC2JSON transformation. Anyhow needs to be investigated.</p> <p>TODO: Apparently, there is also an issue with the openings (under Unregistered items).</p> <p></p> <p></p> <p>On Level 1, we can see that the furnitures have been removed by he filtering.</p> <p>We can also observe an anomaly in the display of Duplex_A_20110907_optimized.ifc with walls above the first level being displayed as belonging to the first level. Actually, the are erroneously defined as part of Level 1 i the original file!</p>"},{"location":"features/transform-to-ifc/#view-with-solibri-of-duplex_a_20110907_optimizedifc-after-filtering","title":"View with Solibri of Duplex_A_20110907_optimized.ifc after filtering","text":""},{"location":"features/transform-to-ifc/#view-with-bimcollab-of-ifc_schependomlaanifc-after-the-filtering","title":"View with BIMcollab of IFC_Schependomlaan.ifc after the filtering","text":"<p>We observe the same issues as for the Duplex: colors and transparency have been lost.</p> <p>The filtering removed the following elements types:</p> <ul> <li>Distribution Element(s)</li> <li>Other(s) [IfcBuildingElementProxy] for the mailboxes and other items</li> <li>Pipe Segment [IfcPipeSegment]</li> </ul> <p></p>"},{"location":"features/transform-to-ifc/#view-with-solibri-anywhere-of-ifc_schependomlaanifc-after-the-filtering","title":"View with Solibri Anywhere of IFC_Schependomlaan.ifc after the filtering","text":"<p>Additionally, the spaces are all listed with Solibri and not with some of the other viewers (OpenIFCViewer, That Open, BIMCollab Zoom).</p>"},{"location":"features/transform-to-ifc/#view-with-bimcollab-of-ark_nordiclca_housing_concrete_buildingpermit_revitifc-after-the-filtering","title":"View with BIMcollab of ARK_NordicLCA_Housing_Concrete_BuildingPermit_Revit.ifc after the filtering","text":""},{"location":"features/transform-to-ifc/#view-with-solibri-anywhere-of-ark_nordiclca_housing_concrete_buildingpermit_revitifc-after-the-filtering","title":"View with Solibri Anywhere of ARK_NordicLCA_Housing_Concrete_BuildingPermit_Revit.ifc after the filtering","text":""},{"location":"features/validate-an-ifc-model-with-ids/","title":"Validate an IFC model with IDS","text":"<p>Feature Group(s): Check</p>"},{"location":"features/validate-an-ifc-model-with-ids/#submit-the-processing-request","title":"Submit the processing request","text":"<p>The validation is started by sending a POST with a Json Body as defined in pydantic</p> <pre><code>class ValidateIfcAgainstIdsInstruction(BaseModel):\n    sourceFileURL: str | None = \"http://localhost:8002/IDS/IDS_wooden-windows_IFC.ifc\"\n    idsFilesURLs: list[str] | None = [\"http://localhost:8002/IDS/IDS_wooden-windows.ids\"]\n    resultType: Literal['json','html','bcfzip'] | None = 'html'\n</code></pre> <ul> <li>The  sourceFileURL is that of the  IFC file</li> <li>The idsFilesURLs gives the list of the IDS's files; there may be more that one</li> <li>The resultType is either json, html or bcfzip; bcfzip is the format of the BIM Collaboration Format (BFC).</li> </ul> <p>The validation is entirely based on the IfcTester module of IfcOpenSell</p> <p>The default files are those from the GitHub of the IfcTester.</p> <p>The are illustative and the validation gives both pass and fail results.</p>"},{"location":"features/validate-an-ifc-model-with-ids/#the-ids_wooden-windowsifc-with-bim-collab","title":"The IDS_wooden-windows.ifc with BIM Collab","text":""},{"location":"features/validate-an-ifc-model-with-ids/#the-validation-result-in-html","title":"The Validation Result in HTML","text":"Validation Result in HTML"},{"location":"installation/dev/","title":"Set up of the d4SU server in development mode","text":""},{"location":"installation/dev/#summary-of-port-numbers-on-local-host","title":"Summary of port numbers on local host","text":"<ul> <li>3100 for NodeJS (Integration Server) -- not part of d4SU Server</li> <li>4040 for ngrok web -- not part of d4SU server</li> <li>5173 for That Open (Ifc Viewer)</li> <li>5432 for Postgres</li> <li>5555 for Flower (Celery Monitoring)</li> <li>6379 for Redis Server (Celery Broker and Result Backend; sessions for the Integration Server)</li> <li>8000 for FastAPI</li> <li>8001 for RedisInsight</li> <li>8002 for http-server (serving the files from the local folder X_BIM_FILES)</li> <li>8003 for mkdocs (see mkdocs.yml)</li> </ul>"},{"location":"installation/dev/#virtual-environment","title":"Virtual Environment","text":"<p>follow https://fastapi.tiangolo.com/virtual-environments/</p> <ol> <li>create project:<ul> <li>mkdir d4su-server</li> <li>cd d4su-server</li> </ul> </li> <li>create virtual environment:<ul> <li>python -m venv .venv</li> </ul> </li> <li>activate the virtual environment:<ul> <li>source .venv/bin/activate</li> </ul> </li> <li>check if active:<ul> <li>which python &gt; gives '/Users/lucvanlier/X_PYTHON_APP/d4su-server/.venv/bin/python'</li> </ul> </li> <li>add gitignore:<ul> <li>echo \"*\" &gt; .venv/.gitignore</li> </ul> </li> <li>install packages: pip install -r requirements.txt</li> <li>intall other with conda<ul> <li>conda install -c conda-forge pythonocc-core=7.8.1 (for a Jupyter viewer)</li> <li>pip install pythreejs (for a Jupyter viewer)</li> </ul> </li> </ol>"},{"location":"installation/dev/#activation","title":"Activation","text":"<p>Activate the virtual environment before starting the server in VS Code. In a terminal:</p> <ul> <li>source .venv/bin/activate</li> </ul>"},{"location":"installation/dev/#run-of-fastapi-celery","title":"Run of fastapi &amp; celery","text":"<ol> <li>dev mode:<ul> <li>terminal 1 - Fastapi:<ul> <li>fastapi dev src/main.py</li> </ul> </li> <li>terminal 2 - Celery:<ul> <li>cd src</li> <li>celery -A long_bg_tasks worker -l INFO</li> </ul> </li> <li>terminal 3 - Flower:<ul> <li>cd src</li> <li>celery -A long_bg_tasks flower</li> </ul> </li> <li>terminal 4 - MkDocs:<ul> <li>Documentation moved to another location ; available on GitHub @ https://github.com/lvanlier/lvanlier.github.io</li> </ul> </li> </ul> </li> <li>prod mode:<ul> <li>fastapi run</li> <li>to be defined = demonize the celeri worker</li> </ul> </li> </ol>"},{"location":"installation/dev/#fastapi-doc-available-web-services","title":"FastAPI Doc: Available web services","text":"<ol> <li>provided by Swagger UI: http://127.0.0.1:8000/docs</li> <li>provided by ReDoc: http://127.0.0.1:8000/redoc</li> </ol>"},{"location":"installation/dev/#mkdocs","title":"MkDocs","text":"<p>Use Mkdocs from github for Mkdocs</p> <p>Use the table reader (creates a table from a csv or xlsx, ...)</p>"},{"location":"installation/dev/#redis","title":"Redis","text":"<p>Install Redis for Docker (to be run in Docker Desktop)</p>"},{"location":"installation/dev/#postgresql-with-postgis","title":"PostgreSQl with PostGIS","text":"<p>PostGIS is apparently available by default.</p>"},{"location":"installation/dev/#postgresql-with-age","title":"PostgreSQL with AGE","text":""},{"location":"installation/dev/#install-age-on-postgresql-16","title":"Install AGE on PostgreSQL 16","text":"<ul> <li>Download Apache AGE 1.5.0</li> <li>sudo make PG_CONFIG=/library/PostgreSQL/16/bin/pg_config install</li> </ul> <p>thereafter CREATE EXTENSION  age; works</p>"},{"location":"installation/dev/#install-bpy-blender-python-to-be-progressed","title":"Install bpy (Blender Python) --to be progressed","text":"<p>https://pypi.org/procdject/bpy/ https://pypi.org/project/bpy/#files</p> <p>https://medium.com/@xiajiun/how-to-use-blenders-bpy-module-on-python-and-jupyter-notebook-on-macos-9155323d362b</p> <p>This worked:</p> <ul> <li>Install Python 3.11.0 from the Python site</li> <li>Download https://www.python.org/downloads/release/python-3110/</li> <li>Install the downloaded pkg</li> <li>Python is in /Library/Frameworks/Python.framework/Versions/3.11/Python</li> <li>remove the previous .venv311 with: sudo rm -rf .venv311</li> <li>Create a venv311</li> <li>/Library/Frameworks/Python.framework/Versions/3.11/bin/python3.11 -m venv .venv311</li> <li>Activate the vene</li> <li>source .venv311/bin/activate</li> <li>Install bpy</li> <li>pip install bpy==4.3.0</li> <li>got bpy-4.3.0-cp311-cp311-macosx_11_0_arm64.whl</li> <li>pip install ifcopenshell</li> <li>got ifcopenshell-0.8.0-py311-none-macosx_11_0_arm64.whl </li> <li>pip install mathutils</li> </ul> <p>Need also to have OpenCASCADE brew install opencascade</p> <p>======</p> <p>conda create --name envconda conda activate envconda conda install python=3.11.0 conda install -c conda-forge ifcopenshell conda install shapely --channel conda-forge</p> <p>python -m venv .venv311 source .venv311/bin/activate</p>"},{"location":"installation/docker/","title":"Docker install","text":"<p>TO BE DONE</p>"},{"location":"introduction/future-and-d4su/","title":"The future and the d4SU Platform","text":""},{"location":"introduction/future-and-d4su/#d4su-platform-context","title":"d4SU Platform Context","text":"<p>The future, driven by the so much needed Digital Transformation  will call for a Platform that provide a consistent access to and management of reference technical data for Buildings and Infrastructure.</p> <p>This is what the  d4SU Platform is aiming at.</p> <p>The diagram above add a few items to the previous one:</p> Item Description d4SU A platform that provides technical support to the handling of IFC files for validation, filtering and extraction of relevant data for spatial units. The d4SU Platform is focused on being an enabler and not a replacement for dedicated business solutions.This documentation site provides information on the architecture, the data model and initial features of d4SU.As usual, all aspects are subjects to change, with the notable exception of its adherence to the KISS principle: simplicity comes first! Data for Spatial Units The LCA, BAMB, EPC, DBP, 3DC, REM, PRA, DBL, ... domains require specific construction data. With increasing standardization, formal API will probably emerge. API, whether standardized or custom are all collectivelly referred to as Data for Spatial Units. Data Dictionary A set of international and national reference data for construction, engineering and operations. The set includes the buildingSMART Data Dictionary (bSDD) which is a collection of interconnected data dictionaries with definitions of terms to describe the built environment. The service is provided by buildingSMART for free, to enable easy access from all software solutions. The content is published by independent organisations, spanning international classifications, national standards and company-specific agreements. Source buildingSamrt The set also includes - generally speaking - business relevant structured data that can be unambiguously referenced by all parties. This includes Mechanical, Electricity and Plumbing (MEP) Nomenclature not included in bSDD IFC Industry Foundation Classes (IFC) are a set of standardized, digital descriptions of the built asset industry. It is an open, global standard published under a Creative Commons license, and as ISO 16739. IFC provides machine interpretability of information and thereby enables automation of workflows. It is vendor-neutral and available to everyone. Source buildingSmartAt its heart, an IFC file includes several components that define the structure and data included in the file. The IFC schema not only captures geometric data and material properties but also includes how different elements relate to each other. This structured approach ensures an accurate depiction of the built environment. Here\u2019s what each component entails:- Entities: these are the core building blocks that represent objects or elements in the model. Think of examples like \u2018IfcDoor\u2019 or \u2018IfcWall\u2019.- Attributes: detailed properties of an entity, such as materials, dimensions, and so on, offering an in-depth view of the components. For example, an \u2018IfcDoor\u2019 may include an attribute such as \u2018OverallHeight\u2019.- Relationships: the IFC model maps out how different entities interact and depend on each other. Inheritance: model entities can inherit properties from parent entities. This helps create a hierarchical and modular data structure.- Property Sets (Psets): this relates to groups of properties that are attached to an entity, e.g. \u2018Pset_WallCommon\u2019, which could include properties like acoustic performance for walls or the fire rating. Source BimCollab IDS Information Delivery Specification (IDS) is a buildingSMART standard for defining information requirements in a computer interpretable form. It allows for automatic compliance checking of IFC models, that increases quality control and fidelity of data. IDS also aids the efficient delivery of the data, by setting the expectations and providing clear guidelines of what needs to be exchanged. A user of IDS can specify how objects, classifications, materials, properties, and even values should be delivered in an IFC model. Source buildingSmart.There is an excellent presentation of IDS by L\u00e9on van Berlo CTO of buildingSmart. BCF The BIM Collaboration Format (BCF) is an open standard for managing issues on a BIM project. BCF is an international openBIM standard, developed and maintained by buildingSMART International. BCF is available in many BIM software tools. There are two different ways to utilize BCF \u2013 via a file-based exchange or via a web service. The BCF-API supports the exchange of BCF issues between software applications via a RESTful web interface, which means that data is exchanged via HTTP query parameters and JSON bodies. Every resource described in this API has a corresponding JSON schema. Source buildingSmart."},{"location":"introduction/future-and-d4su/#from-requirements-to-validated-data-for-spatial-units","title":"From Requirements to Validated Data for Spatial Units","text":""},{"location":"introduction/future-and-d4su/#industry-and-public-sector-initital-coordination","title":"Industry and Public Sector initital coordination","text":"<ol> <li> <p>The first step is the identification of what is needed and of the required 'semantic content' to be provided for each of the domains, i.e. for LCA, BAMB, EPC, DBP, 3DC, REM, PRA, DBL, and others as appropriate. In other words, it is essential to define the collection of sources that will compose the Data Dictionary and ensure that appropriate data format is machine-readable.</p> </li> <li> <p>Thereafter, objects and property set are listed for all domains so that the IDS files can be build. There are numerous options for creating the IDS files given that since 2022 most actors in the AECO insdustry have adopted IDS and have either a free or paying version of an IDS editor. As appropriate to the use case several IDS files can be consolidated.</p> </li> <li> <p>Appropriate IDS are made available to the AECO professionals. They are, for the domains at hand (LCA, BAMB, ...), not specific to a particular construction instance and relativemly stable over time.</p> </li> <li> <p>Mapping can be configured in the AECO Tool to cater for a corresponding export template.</p> </li> </ol> <p>The industry is making tremendous progress on this process</p> <p>For instance, BIMids, which is a join effort of Buildwise (Belgium) and CRTI.B (Lu) provides a suite of IDS across construction disciplines and stages and also corresponding configurations for Archicad and Revit.</p>"},{"location":"introduction/future-and-d4su/#execution-ids-ifc-bcf","title":"Execution: IDS, IFC, BCF","text":"<ol> <li>For each project, the appropriate IDS is used and corresponding data are generated/exported by the AECO tool. The exported file is validated against the IDS.</li> <li>The IFC is submitted via a portal &amp; integration plaform.</li> <li>A validation process is started in the d4SU platform. This is a double check as the validation would normally be run at the AECO side prior to submission.</li> <li>If errors are found, a BCF report of issues is provided to the sender otherwise, processing continue. While BIM Collaboration Format (BCF) is by default available, other formats such as json and html are supported.</li> </ol>"},{"location":"introduction/future-and-d4su/#execution-other-processes","title":"Execution: Other processes","text":"<p>Further processing can be applied to secure that all needed information is provided to the Admin Tool handling the domain (LCA, BAMB, EPC, DBP, ...). This is typically done in the d4SU platform.</p>"},{"location":"introduction/future-and-d4su/#needed-features","title":"Needed Features","text":"<p>The list of features cited hereunder is not complete and is no substitute for proper domain requirements to be established by domain experts.</p> <p>For the domains hereunder, the features required are mostky the capability the verify the presence and capture the value of:</p> <ul> <li>Elements such as sites, buildings, storeys, spaces, and product containment for walls, slabs,... and distribution elements</li> <li>Relationships that links those elements (aggregation, containment, boundary,... )</li> <li>Propertysets (Pset) - Almost all needed metrics &amp; characteristics can be captured in Psets</li> <li>Geometry, often in basic form (location &amp; orientation, dimensions) that can be captured by a bounding box, while detailed 3D geometry (which may be quite complex) is required for realistic visualization but not for efficiency values computation and is often not present at all in curent data of public admin tools.</li> </ul> Domain Features Psets need to be defined and verified for materials linked to Environment Product Declarations (EPDs) with defined Global Warming Potential (GWP) and with corresponding volume, weight and area measures. As a minimum for construction components, but can be extended to MEP components. IDS comes as primary support to express and verify the information requirements.BIMids provides IDS files for LCA which are partial but already relevant. Also Psets for construction materials and MEP, but also for elements assemblies. Again, most or all can be expressed as Psets on elements (construction &amp; HVAC). When EPC are needed for Building Units and depend on the occupancy type, it is needed to assign spaces to distinct Spatial Units. Hence, Spaces or Spatial Zone information requirement must be embodied in the IDS or handled in another way. BIMids provides IDS files for EPC (denoted PEB) which are partial but already relevant. A whole lot of requirements can be met on the basis of Psets as done for the Digital Building Permit in Finland. However, there are other requirements that refers to neighboring constructions and may require geometry processing, including sight from windows on neighboring private inner spaces.BIMids provides IDS files for DBP which are partial but already informative. Cadastre has requirements that can be captures by Psets but aso quite a number of requirements that require geometry processing. One specific aspect is the conversion from local coordinates to geodetic ones (WGS 84 or other).BIMids provides IDS files for 3DC (Vertical Cadastre of Luxemburg) which are partial but already relevant. Real-Estate Management will also mostly require appropriate Psets, some of them simply grounded on Facility Management Psets. Again, most if not all needed data are contained in the elements tree and Psets. Again, most if not all needed data are contained in the elements tree and Psets for Construction and HVAC elements."},{"location":"introduction/future-and-d4su/#a-more-detailed-context-diagram","title":"A more detailed context diagram","text":"<p>On the next diagram 'links' are better rendered without darkmode</p> <pre><code>\nblock-beta\n    columns 4\n    block:actors:4\n        columns 4\n        aeco_a((\"AECO roles&lt;br /&gt;&amp;nbsp;&lt;br /&gt;Architects, Engineers, Builders&lt;br /&gt;&amp;nbsp;&lt;br /&gt;Facily Managers\"))\n        advisor_a((\"Constituent&lt;br /&gt;and/or Advisory &amp; Technical &lt;br /&gt;Expert roles\"))\n        admin_a((\"Public Service roles&lt;br /&gt;&amp;nbsp;&lt;br /&gt;Agents, Inspectors, Domain&lt;br /&gt;Experts\"))\n    end\n    block:systems:4\n        columns 4\n        aeco_sys[\"Architecture&lt;br /&gt;Engineering&lt;br /&gt;Construction&lt;br /&gt;Facily Management\"]\n        tep_sys[\"Technical encoding &amp; processing &lt;br /&gt;for permits, autorizations and &lt;br /&gt;certificates&lt;br /&gt;with API to d4SU\"]\n        case_sys[\"Constituent Portal&lt;br /&gt;Case Management&lt;br /&gt;Licensing &amp; Permitting\"]\n        admin_sys[\"Licenses, Permits, Certificates&lt;br /&gt;Land Administration (LADM)&lt;br /&gt;Digital Building Logbook (DBL)\"]\n    end\n    block:references:4\n        ids_ref(((\"Information Delivery&lt;br /&gt;&amp;nbsp;&amp;nbsp;Specifications&amp;nbsp;&amp;nbsp;&lt;br /&gt;IDS's\")))\n        datadict_ref(((\"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Data Dictionary:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br /&gt;bSDD, ...\")))\n    end\n    block:db:4\n        columns 4\n        aeco_db[(\"&lt;br /&gt;AECO&lt;br /&gt;Architecture, Engineering,&lt;br /&gt; Construction &amp; Operation&lt;br /&gt;Data\")]\n        pointcloud_db[(\"&lt;br /&gt;Point Cloud\")]\n        case_db[(\"&lt;br /&gt;Public Service&lt;br /&gt;CRM&lt;br /&gt;Case Management DB\")]  \n        admin_db[(\"&lt;br /&gt;Cadastre, Environment,&lt;br /&gt;Housing, Infrastructure,&lt;br /&gt; City Urban Administraion DB\")]\n    end\n    block:int:4\n        columns 4\n        aeco_int([\"&lt;br /&gt;&amp;nbsp;&lt;br /&gt;AECO Integration Platform&lt;br /&gt;e.g. Speckle&lt;br /&gt;&amp;nbsp;\"])\n        block:ifcbcf:1\n            columns 1\n            bcf_int[/\"BCF&lt;br /&gt; as issues&lt;br /&gt;format\"/]\n            ifc_int[/\"IFC&lt;br /&gt; as exchange&lt;br /&gt;format\"/]\n            other_int[/\"&lt;br /&gt;&amp;nbsp;&amp;nbsp;Other (bespoke)&lt;br /&gt;formats&lt;br /&gt;&amp;nbsp;\"/]\n        end\n        block:d4sublock:1\n            columns 1\n            d4su_int([\"&lt;br /&gt;&amp;nbsp;&lt;br /&gt;d4SU Server&lt;br /&gt;Data for Spatial Units&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&amp;nbsp;\"])\n            d4su_db[(\"&lt;br /&gt;D4SU DB &amp; File Storage\")]\n        end\n        ai4su_ml([\"&lt;br /&gt;ai4SU&lt;br /&gt;AI Learning&lt;br /&gt; for Spatial Units&lt;br /&gt;&amp;nbsp\"])\n    end\n\n    aeco_a --&gt; advisor_a\n    advisor_a --&gt; aeco_a\n    admin_a --&gt; advisor_a\n    advisor_a --&gt; admin_a \n    aeco_a --&gt; aeco_sys\n    advisor_a --&gt; tep_sys\n    advisor_a --&gt; case_sys\n    admin_a --&gt; admin_sys\n    aeco_sys --&gt; aeco_db\n    case_sys --&gt; case_db\n    admin_sys --&gt; admin_db\n    tep_sys --&gt; d4su_int\n    tep_sys --&gt; other_int\n    aeco_db --&gt; aeco_int\n    pointcloud_db --&gt; aeco_db\n    aeco_db --&gt; ifc_int\n    case_db --&gt; admin_db\n    aeco_int --&gt; ifc_int\n    ifc_int --&gt; d4su_int\n    other_int --&gt; d4su_int \n    d4su_int --&gt; case_db\n    d4su_int --&gt; admin_db\n    d4su_int --&gt; d4su_db\n    d4su_int --&gt; ai4su_ml\n    d4su_db --&gt; ai4su_ml\n    admin_db --&gt; ai4su_ml\n    d4su_int --&gt; bcf_int\n    bcf_int --&gt; aeco_db\n\n    style actors fill:#fff\n    style systems fill:#fff\n    style db fill:#fff\n    style int fill:#fff\n    style references fill:#fff\n    style ifcbcf fill:#fff\n    style d4sublock fill:#fff\n\n    style aeco_a color:white,fill:#991D58\n    style advisor_a color:white,fill:#991D58\n    style admin_a color:white,fill:#991D58\n    style aeco_sys color:white,fill:#0070C0\n    style case_sys color:white,fill:#5725D7\n    style tep_sys color:white,fill:#5725D7\n    style admin_sys color:white,fill:#5725D7\n    style aeco_db color:white,fill:#0070C0\n    style case_db color:white,fill:#5725D7\n    style admin_db color:white,fill:#5725D7\n    style pointcloud_db color:white,fill:#0070C0\n    style aeco_int color:white,fill:#0070C0\n    style ifc_int color:black,fill:#bad9f5\n    style bcf_int color:black,fill:#bad9f5\n    style other_int color:black,fill:#bad9f5\n    style d4su_int color:white, fill:#148F77\n    style ai4su_ml color:white,fill:#7ec2b5\n    style d4su_db color:white,fill:#148F77\n    style ids_ref color:white,fill:#5725D7\n    style datadict_ref color:white,fill:#5725D7\n\n</code></pre> <p>Arrows to-from Data Dictionary and IDS are not depicted on the diagram as these data are used by most other components. </p>"},{"location":"introduction/future-and-d4su/#way-forward-when-there-is-no-bim-to-start-with","title":"Way forward when there is no BIM to start with","text":"<p>As shown on the above diagram, there is a flow between the Technical encoding &amp; processing for permits, autorizations and certificates with API to d4SU and d4SU with an Other (bespoke format) exchange.</p> <p>Indeed, it cannot be assumed that for all existing construction, there is a BIM model available. So, there is a temptation to build end-to-end monoliths instead.</p> <p>The proposed way forward is to adopt a modular design and separate data entry from data management and business logic:</p> <ul> <li>Simple cases can be handled without a BIM tool while leveraging all the capabilities of OpenBIM tools such as IfcOpenShell. Instead of reinventing the wheel with yet another data model for construction, the data model can be based on IFC with CRUD capabilities of IfcOpenShell. If there is no need of geometry, that is not an issue: in IFC, geometry is optional.  </li> <li>Complex cases are de facto handled with a BIM tool. Asking for re-encoding everything in a custom tool is both inefficient and costly. And there is also the additional cost of creating and maintaining a model that that can handle the complexities that have already been addressed in IFC.  </li> </ul> <p></p>"},{"location":"introduction/future-and-d4su/#initiatives-that-rely-on-bimifc-or-promote-bimifc-in-administrative-processes","title":"Initiatives that rely on BIM/IFC or promote BIM/IFC in administrative processes","text":"<p>There is much to say on that. The following document provides in a single place a lot of information:</p> <p>ACCORD - Automated Compliance Checks for Construction, Renovation or Demolition Works - Landscape Review Report - 2023</p>"},{"location":"introduction/future-and-d4su/#the-future-of-ifc-with-ifc5-a-better-file-format","title":"The future of IFC with IFC5 - A better file format","text":"<p>IFC is a mature standard, managed by buildingSMART. The first version appeared in 1996 (IFC1.5.1). IFC2X3 was submitted to ISO and published in 2008. IFC 4.0 was released in 2013. The current version is IFC 4.3.2 (aka IFC4X3 ADD2) (2024) which is also an ISO Standard.</p> <p>Full documentation of IFC 4.3.2 is available on the web.</p> <p>IFC5 aims to be a better version of IFC, without the limitations of the STEP format.</p> <ul> <li>IFC5 uses concepts from USD (Universal Scene Description): Def, Class, Over, Inherits, and some others.<ul> <li>Def (https://openusd.org/release/glossary.html#def): is a way to place / instantiate something.</li> <li>Class (https://openusd.org/release/glossary.html#class): is something that is abstract but can be instantiated. Similar to the 'Type' objects IFC 2x3 and 4.x have.</li> <li>Over (https://openusd.org/release/glossary.html#usdglossary-over): is a way to 'overlay' data over other data. This is a way to extend/add data to objects of yourself and others.</li> <li>Inherits (https://openusd.org/release/glossary.html#usdglossary-inherits): A way to add data to your object.</li> </ul> </li> <li>IFC5 foster composability. Different teams can work independently on different parts of the building or infrastruction definition. In  USD, this is embodied in layers. In IFC5 layers are materialized as files; this means that a buidling or infrastructure can be represented by an ordered sequence of file that each contain a number of  components and characteristics.</li> <li>Core representation is based on the MESH geometry, which is simple and efficient</li> <li>The format is JSON</li> <li>IFC5 borrows concepts and capabilities from USD, but is not USD and has its proper grammar.</li> </ul> <p>IFC5 is not yet a standard and is still evolving. More information is available on the IFC5 developmnt site. However, composability is most probably there to stay. This will enable to decompose an IFC in an orderly sequence of files depending on the need. For instance, a decomposition might possibly be:</p> <ul> <li>A first file contains the base structure</li> <li>A second file contains all the HVAC systems</li> <li>A third file contains the common spatial parts</li> <li>A series of files provide the details of each of the private spatial parts.</li> </ul> <p>But there is no guarantee that this will happen: IFC5 is in development, meaning that most things are subjected to change.  Clearly, d4SU will follow on IFC5, from now on and as it reaches maturity.</p>"},{"location":"introduction/future-and-d4su/#books","title":"Books","text":"<p>Rajabifard, A., et al. BIM and Urban Land Administration. 1st ed., CRC Press, 2019</p> <p>Andr\u00e9 Borrmann, Markus K\u00f6nig, Christian Koch, Jakob Beetz (editors). Building Information Modeling - Technology Foundations and Industry Practice</p>"},{"location":"introduction/needs-and-case-for-action/","title":"Needs and Case for Action","text":""},{"location":"introduction/needs-and-case-for-action/#current-state","title":"Current State","text":"<p>Management and control of buildings and infrastructures becomes increasingly important. Public Authorities regulate a larger number of aspects such as:</p> <ul> <li>City Urbanism and Environmental Impact: Energy Performance of Buildings (EPB), Life Cycle Analysis (LCA), Recycle, Reuse and Repurpose (aka City Mining or Buildings as  Material Banks (BAMB)).</li> <li>Occupation and availability or suitability of Building or Infratucture for their use.</li> <li>The determination of taxes based on surface or the valuation of property.  </li> <li>...</li> </ul> <p></p> <p>In order to be compliant, constituents and/or project managers in the AECO industry need to submit an increasing number of paper forms or pdfs either physically or via a Constituents Portal or via a Domain Specific Application. Often, lots of technical data need to be provided that are already available elsewhere and need to be encoded repeatedly in different systems with unaligned semantics.</p> <p>Typically, as outlined in the above diagram, there is no integration with the AECO software tools that are the source of the data.</p> <p>As said, this is the typical case and not the rule as examplified by the Digital Buidling Permit in Finland (RAVA3Pro, see hereunder in DBP).</p> Domain Impact As defined by the European Environment Agency Life-cycle assessment (LCA) is a process of evaluating the effects that a product has on the environment over the entire period of its life thereby increasing resource-use efficiency and decreasing liabilities. It can be used to study the environmental impact of either a product or the function the product is designed to perform.  When applied to a building or infrastructure, all parts (walls, slabs, columns, beams, ... ) with their structure (layers, dimensions) and material consituents may be accounted for and need to be reported / encoded and this a particularly demanding. Ideally, materials are linked to defined standard classifications that spare the reencoding of all detailed charateristics. Buildins as Material Banks (BAMB) also referred to as CityMining or as Recycle, Reuse and Repurpose is a new way to address the value of building materials promoting a circular building industry. Material Passports document the characteristics of the materials that give them value for recovery and reuse. Additionally, reversibility of design is promoted to minimize waste caused by demolition and reconstruction. More on this in the BAMB site  When applied to the assessment of a building, there is a need to document the structure of the construction and its constituents (walls, slabs, columns, beams, ...) in relation to Material Passports. There is also a need to relate material assemblies to their eventual disassembly capability. As defined in the European Energy Performance of Buildings Directive,The energy performance certificate include the energy performance of a building expressed by a numeric indicator of primary energy use in kWh/(m2.y), and reference values such as minimum energy performance requirements, minimum energy performance standards, nearly zero-energy building requirements and zero-emission building requirements, in order to make it possible for owners or tenants of the building or building unit to compare and assess its energy performance.  Depending on the usage of the building, different schemes are applied to assess the energy performance. But as noted in the ANNEX V - Template for energy performance certificates (referred to in Article 19), there are numerous requirements that refer to data that have AECO Tools as source, such as technical characteristics of the envelope (the average U-value for the opaque elements of the building envelope and the average U-value for the transparent elements of the building envelope) or to HVAC data. National evaluation models that support the computation of the numeric indicator of primary energy use in kWh/(m2.y) often use detailed information that goes beyond the envelope. Again lots or required data are originally sourced by the AECO Tools. According to the Digital Building Permit conference 2024 the Digitalisation of building permits was detected as the critical knot to be solved, in order to pave the way towards massive digitalisation in the construction industry, and to enable the potential of automation and optimisation in the management of building and city data. The topics addressed in the conference made quite obvious the relevance of BIM. Indeed, lots of data required for a Permit are sourced from the AECO tools. There are better ways to provide the data than paper and pdf forms.Building Permits increasingly rely on BIM data, although often reduced to 2D plans. But very often, information that is readily available in the BIM source is retyped in various forms.It must also be noted that in numerous cases, architects do not produce and use a BIM model. For simple projects, they can dispense with BIM and the effort to produce the model would not bring tangible benefits for the Building Permit and for other administrative processes (Energy Performance of Building, Life Cycle Analysis, ...) given that these processes too often do not leverage BIM. It's a little bit the egg-and-chicken problem.However, while there are always good ways to explain the status-quo, there are also more and more places that rely on on BIM-based inputs to their Building Permits. Indeed, Digital Buidling permits are already a reality in a number of places such as Estonia, Finland with the RAVA3Pro project, Dubai,... According to the Land Portal The need for 3D cadastre is growing in importance due to the increasing overlap of property rights in densifying urban environments and due to the increase in property values globally. As property values rise, property owners increasingly want to ensure the legal status of their property is accurately recorded; as more of these property owners inhabit portions of multi-level dwelling structures, the appeal of a 3D cadastre becomes apparent. There are already 3D Cadastres in several places (e.g. Shenzhen, China).  Again, lots of data can potentially be sourced from the AECO tools. Real Estate Management of public buildings relies on numerous data that record the structure of 'spaces' and that link construction components and equipement to maintenance contracts. Again lots of data could be sourced from the AECO tools. Public Revenue Administration encompases the determination of taxation basis that can apply to commercial surfaces, offices, parking, ...  Surface data is typically available in the AECO Tools for new and renovated buildings. Last, but not least, the Digital Building Logbook is an essential component of a modern administration. The European Commission, in the article on the State of the art of the digitalisation of the building sector, provides the following description A digital building logbook is a common repository for all relevant building data, such as administrative documents and/or data for maintenance and bureaucratic purposes, as well as to assess the buildings\u2019 energy performance. Currently, building-related data, such as data of technical and construction information, building characteristics, energy-efficiency performance information and market transactions data, are limited and often inaccurate.The lack of such data and a common repository to store and display them altogether generates additional costs and inefficiencies, stifles innovation, increases risk and undermines the confidence of investors. Digital Building Logbooks aim to increase transparency and trust among owners, tenants, financial institutions, construction sector stakeholders and public administrations and reduce information disparities. The organised and shared data would not only reduce uncertainty, but also time and costs needed to track down missing information. <p>Call for action</p> <p>As is apparent from the above highlights of LCA, BAMB, EPC, DBP, 3DC, REM, PRA, DBL, each of these domain requires data from the AECO domain. The disparate collection of all needed data through independent processes and tools can only generate additional cost, inefficiencies and pains for all concerned participants.Additionally, the proliferation of distinct semantics and rules for the same data can only increase the level of errors and raise the level of ambiguity and distrust.</p>"},{"location":"introduction/needs-and-case-for-action/#data-for-spatial-units-and-the-land-administration","title":"Data for Spatial Units and the Land Administration","text":"<p>Spatial Units are a key element of Land Administration.</p> <p>The Land Administration Domain Model (LADM) ISO 19152-1:2024 brings an interesting perpective on the relationship between Parties, Rights, Restrictions and Responsibilities (RRR), Administrative Units (BAUnit) and Spatial Units (such as buidlings or infrastructure and parts thereof).</p> <pre><code>flowchart LR\n    Party\n    RRR\n    BAUnit\n    SpatialUnit\n    Party --&gt; RRR \n    RRR --&gt; BAUnit\n    BAUnit --&gt; SpatialUnit</code></pre> <p>Many aspects of Public Regulations related to buildings and infrastructure appears as expressions of Rights, Restrictions and Responsibilities (RRR) towards a (Basic) Administration Unit (BAUnit) related to a Spatial Unit.</p> <p>The Cadastre is the primary domain of LADM, but Valuation of property is also included in the scope of LADM and -- in a broader perspective -- the concepts of RRR, BAUnit and Spatial Units are relevant for many administrative regulations.</p> <p>For a given building, there may be numerous BAUnits (and related RRR), each covering a specific aspect:</p> <ul> <li>Urban Permit BAUnit and related Spatial Unit</li> <li>Energy Performance Certificate BAUnit and related Spatial Unit</li> <li>Life Cycle Analysis BAUnit and related Spatial Unit</li> <li>Housing Contract Registration BAUnit and related Spatial Unit</li> <li>Tax on Commercial Surface BAUnit and related Spatial Unit</li> <li>Tax on Office Surface BAUnit and related Spatial Unit</li> <li>Regulated Parking BAUnit and related Spatial Unit</li> <li>...</li> </ul> <p>The issue is that while there is a convergence in the Architecture, Engineering, Construction and Operations (AECO) industry towards the adoption of standard data exchange formats (notably BIM / IFC), there is, in the Public Sector, a lack of adoption of standards to support administrative processes related to Spatial Units. Standards such as BIM/IFC are mostly regarded as too complex and beyond reach.</p> <p>Typically, for each aspect -- i.e., each type of (Basic) Administrative Unit, there will be specfic formats, models and documents requested from the involved Parties to provide Spatial Unit related data.</p> <pre><code>flowchart LR\n    Party\n    RRR\n    BAUnit\n    SpatialUnit\n    Party --&gt; RRR \n    RRR --&gt; BAUnit\n    BAUnit --&gt; SpatialUnit\n    Data[\"BAUnit specific Data &amp; Documents related to the corresponding Spatial Unit\"] --&gt; BAUnit</code></pre> <p>This means concretely that there will be specific data collection, data processing, data exchanges, documents format and Case Management processes for each type of BAUnit</p> <ul> <li>Urban Permit BAUnit : specific forms, plans, documents, proof of rights, ...</li> <li>Energy Performance Certificate (EPC) BAUnit : specific forms, geometry, material, quantities, ... for energy consumption modeling</li> <li>Life Cycle Analysis (LCA) BAUnit : lots of data common to EPC but mostly a separate data collection and processing</li> <li>Housing Contract BAUnit : number of rooms, type and surface thereof, HVAC, ...</li> <li>Commercial Surface BAUnit : surface subject to a non residential tax,</li> <li>Office Surface BAUnit : type of usage, surface subject to a non residential tax,</li> <li>Regulated Parking BAUnit : type and number of places, electric charging stations, ...</li> <li>...</li> </ul> <p>This is not always the case and some countries and localities have already adopted a more streamlined approach which often relies on BIM.</p> <p>However, generally speaking, adoption of standards is infrequent or incomplete and the number of distinct data formats, streams and disparate semantics becomes increasingly problematic. This raises issues for all stakeholders: Public Services agents, involved Parties (Constituents, AECO profesionals, Advisors / SMEs for the RRR/BAUnit domain).</p>"},{"location":"introduction/needs-and-case-for-action/#opportunity-with-new-releases-of-the-industry-foundations-classes-ifc-standard-and-the-recent-addition-of-the-information-delivery-specification-ids","title":"Opportunity with new releases of the Industry Foundations Classes (IFC) standard  and the recent addition of the Information Delivery Specification (IDS)","text":"<p>Interestingly, the AECO standardization has evolved towards a broader scope and a better coverage of all elements related to Buildings and Infrastructures. </p> <p>One of these new features is the introduction in BIM / IFC of Spatial Zones as a way to organize data with regards to a particuliar aspect (security, thermal load, ...).  </p> <p>As reflected in the schema hereafter, there is then a unique opportunity to leverage BIM standards to create a foundation for managing all data for Spatial Unit that underpin their relationship to the corresponding BAUnit.</p> <pre><code>flowchart LR\n    Party\n    RRR\n    BAUnit\n    SpatialUnit\n    Party --&gt; RRR \n    RRR --&gt; BAUnit\n    BAUnit --&gt; SpatialUnit\n    subgraph d4SU\n        Building --&gt; SpatialZone\n        SpatialZone --&gt; Data\n        Data[\"Appropriate Data pertaining to the Spatial Unit related to the BAUnit\"]\n    end\n    SpatialZone --&gt; SpatialUnit\n    Data --&gt; BAUnit</code></pre> <p>The progress of the BIM / IFC standards are impressive and critical to make this all possible. First, there are not many concepts that cannot be accounted for in IFC. This makes the format ideal for the exchange of detailed and complex information betweeen AECO Tools and for conveying the technical data that are required by administrative processes.</p> <p>In IFC everyting can be expressed by elements / objects with relationships, geometries (when needed) and properties. The level of detail might have appeared overwhelming in comparison with the requirements of administrative processes and there was no easy way to specify the container (e.g. property set and property) for the required data so that a human intervention was often necessary to find the information with a GUI tool.</p> <p>With the Information Delivery Specification (IDS) available since 2022 and taken into account by all major tools, there is now a capability to define the information delivery requirements for an IFC.</p> <p>But all these promises would remain difficult to achieve without the progress made in  the availability of Open Source software that makes the access to BIM / IFC / IDS simple and efficient. Notably, IfcOpenShell libraries and tools supports all Create, Read, Udpate, Delete (CRUD) on IFC and ThatOpen libraries and Tools provide effective visualization capabilities as well as IDS editing and validation capabilties.</p> <p>Other tools, that often leverage these Open Source toolboxes and platforms, cater for extra capabilites.</p> <p>Therefore, BIM / IFC / IDS can be leveraged to access existing data provided by AECO software but also to enrich / augment data for specific needs.</p> <p>This is indeed critically important given that IFC files coming out of the AECO industry are focused on the need of that industry and not on the needs of registering RRR on BAUnits related to Spatial Units. There is therefore a real need to be able to enrich / augment data to support administrative processes.</p>"},{"location":"introduction/needs-and-case-for-action/#going-one-step-further","title":"Going one step further","text":"<p>Beyond enabling better data management in support of administrative processes, a structured approached can also lower the cost of creating 'intelligence models' to assist / copilot the administrative processes.</p> <pre><code>flowchart LR\n    subgraph ai4SU_DataSets[\"AI Learning Datasets\"]\n        Party\n        RRR\n        BAUnit\n        SpatialUnit\n        Party --&gt; RRR \n        RRR --&gt; BAUnit\n        BAUnit --&gt; SpatialUnit\n        subgraph d4SU\n            Building --&gt; SpatialZone\n            SpatialZone --&gt; Data\n            Data[\"Appropriate Data pertaining to the Spatial Unit related to the BAUnit\"]\n        end\n        SpatialZone --&gt; SpatialUnit\n        Data --&gt; BAUnit\n    end\n    subgraph ml4SU_Env[\"AI Learning Environment\"]\n        ai4SU_training[\"ai4SU Training\"]\n        ai4SU_engine[\"ai4SU Engine\"]\n        ai4SU_training --&gt; ai4SU_engine\n    end\n    ai4SU_DataSets --&gt; ai4SU_training\n    d4SU --&gt; ai4SU_engine\n    ai4SU_engine --AI Assessment--&gt; BAUnit</code></pre> <p>This is already a research topic, but effective deployment of models will be impeded by the current scarcity of strutured 'normalized' data. The approach that underpins d4SU will help provide those much needed data.</p>"},{"location":"introduction/references/","title":"References","text":""},{"location":"introduction/references/#ladm","title":"LADM","text":"<p>The Land Administration Domain Model (LADM) ISO 19152-1:2024</p>"},{"location":"introduction/references/#bimids","title":"BIMids","text":"<p>According to the BIMids site, BIMids is Simplifying the exchange process in a BIM project and helps you define the level of information expected in the model. Files are available on the Download tab and tutorials are also provided.</p> <p>Buildwise (previously BBRI) is a private research institute founded in 1959 under impulse of the National Federation of Belgian Building Contractors in application of the so-called \"De Groote\" decree-law of 1947. This decree-law named after the former Minister of Economic Affairs was specifically aimed at the promotion of applied research in the construction industry, in order to improve its competitiveness. In application of this decree-law, the statutory members of the Buildwise are the more than 90,000 Belgian construction companies (general contractors, carpenters, glaziers, plumbers, roofers, floorers, plasterers, painters, etc..), mostly SMEs. Source: Buildwise </p> <p>CRTI.B (Centre de Ressources des Technologies et de l'Innovation pour le B\u00e2timent)(i.e. The Building Technology and Innovation Resource Center) is a neutral and open platform for all stakeholders in the construction process and seeks to improve the productivity and competitiveness of construction stakeholders. Among other objectives, the CRTI-B is to define, document, introduce and maintain standards for tender documents governing construction project markets. Source (translated to english from)CRTI.</p>"},{"location":"introduction/references/#domain-references","title":"Domain references","text":""},{"location":"introduction/references/#life-cycle-assessment","title":"Life Cycle Assessment","text":"<p>European Environment Agency - Life Cycle Assessment</p>"},{"location":"introduction/references/#buildings-as-material-banks","title":"Buildings as Material Banks","text":"<p>BAMB site</p>"},{"location":"introduction/references/#energy-performance-certificate","title":"Energy Performance Certificate","text":"<p>European Energy Performance of Buildings Directive</p>"},{"location":"introduction/references/#digital-building-permit","title":"Digital Building Permit","text":"<p>Digital Building Permit conference 2024</p> <p>Finland RAVA3Pro project</p>"},{"location":"introduction/references/#3d-cadastre","title":"3D Cadastre","text":"<p>Land Portal on 3D Cadastre</p>"},{"location":"introduction/references/#digital-building-logbook","title":"Digital Building Logbook","text":"<p>the State of the art of the digitalisation of the building sector</p>"},{"location":"introduction/references/#aeco-software-tools","title":"AECO Software Tools","text":""},{"location":"introduction/references/#aeco-software","title":"AECO Software","text":"<p>There are many outstanding BIM products. Hereunder some of them:</p> <ul> <li>ACCA software</li> <li>Autodesk Revit; extended with Autodesk BIM Collaborate Pro cloud collaboration</li> <li>Bentley OpenBuildings; extended with Bentley Infrastructure Cloud</li> <li>CYPE</li> <li>Dalux</li> <li>Graphisoft Archicad (Nemetschek); extended with Graphisoft BIMcloud collaboration</li> <li>Kubus BIMCollab</li> <li>Plannerly</li> <li>Solibri Model Checker (Nemetschek)</li> <li>Trimble Connect</li> <li>Trimble SketchUp; often used to complement non-BIM projects with a 3D Model; the 3D Model can thenafter be exported as an IFC Model</li> <li>Vectorworks (Nemetschek); extended with Vectorworks Cloud Services</li> </ul>"},{"location":"introduction/references/#open-tools","title":"Open Tools","text":"<p>New products emerge also from the Open Source community such as:</p> <ul> <li>Blender with Bonsai; see also the video on Youtube</li> <li>IfcOpenShell libraries and tools. The product is not new but continuously incorporates new capabilities.</li> <li>That Open libraries and Tools</li> <li>Speckle</li> </ul> <p>Most products enable AECO professionals to work on the design and construction phase and thenafter on the operation (Facility Management). Key product can exchange important information using the Industry Foundation Classes (IFC) format. Some products, such as Blender with the Bonsai add-on can natively edit the IFC.</p>"},{"location":"introduction/references/#accord","title":"ACCORD","text":"<p>ACCORD - Automated Compliance Checks for Construction, Renovation or Demolition Works - Landscape Review Report - 2023</p>"},{"location":"introduction/references/#ifc","title":"IFC","text":""},{"location":"introduction/references/#buildingsmart","title":"buildingSMART","text":"<p>buildingSMART</p>"},{"location":"introduction/references/#ifc4x3add2","title":"IFC4X3ADD2","text":"<p>ISO 16739-1:2024</p>"},{"location":"introduction/references/#ifc4x3add2-documentation","title":"IFC4X3ADD2 documentation","text":"<p>IFC 4.3.2.20241204 (IFC4X3_ADD2)</p>"},{"location":"introduction/references/#usd","title":"USD","text":"<p>Universal Scene Description</p>"},{"location":"introduction/references/#ifc5-development","title":"IFC5 development","text":"<p>IFC5-development on GitHub</p>"},{"location":"introduction/references/#books","title":"Books","text":"<p>Rajabifard, A., et al. BIM and Urban Land Administration. 1st ed., CRC Press, 2019, https://doi.org/10.1201/9781351032346.</p> <p>Andr\u00e9 Borrmann, Markus K\u00f6nig, Christian Koch, Jakob Beetz (editors). Building Information Modeling - Technology Foundations and Industry Practice https://doi.org/10.1007/978-3-319-92862-3.</p>"}]}